package com.belk.pep.controller;
import java.text.ParseException;
import java.io.IOException;
import java.io.Serializable;

import com.belk.pep.util.DateUtil;
import java.util.*;
import java.text.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;
import com.belk.pep.model.StyleColor;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Event;
import javax.portlet.EventRequest;
import javax.portlet.EventResponse;
import javax.portlet.PortletSession;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.apache.commons.lang.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.portlet.ModelAndView;
import org.springframework.web.portlet.mvc.Controller;
import org.springframework.web.portlet.mvc.EventAwareController;
import org.springframework.web.portlet.mvc.ResourceAwareController;

import com.belk.pep.common.model.Common_BelkUser;
import com.belk.pep.common.model.Common_Vpuser;
import com.belk.pep.common.model.ContentPetDetails;
import com.belk.pep.common.model.ImageDetails;
import com.belk.pep.common.userdata.UserData;
import com.belk.pep.constants.WorkListDisplayConstants;
import com.belk.pep.dao.impl.WorkListDisplayDAOImpl;
import com.belk.pep.delegate.WorkListDisplayDelegate;
import com.belk.pep.domain.PepDepartment;
import com.belk.pep.domain.PepDepartmentPK;
import com.belk.pep.exception.checked.PEPFetchException;
import com.belk.pep.form.WorkListDisplayForm;
import com.belk.pep.model.AdvanceSearch;
import com.belk.pep.model.ContentStatusDropValues;
import com.belk.pep.model.ImageStatusDropValues;
import com.belk.pep.model.RequestTypeDropValues;
import com.belk.pep.model.WorkFlow;
import com.belk.pep.util.ClassDetails;
import com.belk.pep.util.DateUtil;
import com.belk.pep.util.DepartmentDetails;
import com.belk.pep.util.PropertiesFileLoader;
import com.belk.pep.model.WorkListDisplay;
import com.belk.pep.util.HashmapWorkFlow;



/**
 * The Class WorkListDisplayController.
 */
public class WorkListDisplayController implements Controller,EventAwareController,ResourceAwareController {
    
    /** The Constant LOGGER. */
    private final static Logger LOGGER = Logger.getLogger(WorkListDisplayDelegate.class.getName());
    
    /** The work list display delegate. */
    private WorkListDisplayDelegate workListDisplayDelegate;
    
    /** The work list display form. */
    private WorkListDisplayForm workListDisplayForm;
    
    /** The work flow list. */
    @SuppressWarnings("rawtypes")
    private List<WorkFlow> workFlowList;  
   
    
    /** The mv. */
    private ModelAndView mv ;
    
    
    /** The acending list. */
    @SuppressWarnings("rawtypes")
    private ArrayList acendingList; 
    
    /** The decending list. */
    @SuppressWarnings("rawtypes")
    private ArrayList decendingList; 
    
   
    
    /**
     * getter method for WorkListDisplay delegate.
     *
     * @return the work list display delegate
     */
    public WorkListDisplayDelegate getWorkListDisplayDelegate() {
        return workListDisplayDelegate;
    }
    
    /**
     * Setter method for delegate.
     *
     * @param workListDisplayDelegate the new work list display delegate
     */
    public void setWorkListDisplayDelegate(
        WorkListDisplayDelegate workListDisplayDelegate) {
        this.workListDisplayDelegate = workListDisplayDelegate;
    }
    
    /**
     * getter method for Form.
     *
     * @return the work list display form
     */

    public WorkListDisplayForm getWorkListDisplayForm() {
        return workListDisplayForm;
    }

    /**
     * Setter method for form.
     *
     * @param workListDisplayForm the new work list display form
     */
    public void setWorkListDisplayForm(WorkListDisplayForm workListDisplayForm) {
        this.workListDisplayForm = workListDisplayForm;
    }
    
    
    /**
     * 
     * @param jsonArray
     * @return
     * @throws Exception
     * @throws PEPFetchException
     */
    // Web service to Inactivate/Activate Pet
    private String callInActivateAndActivatePetService(JSONArray jsonArray) throws Exception,
         PEPFetchException {
         
         String responseMsg = null;
         responseMsg = workListDisplayDelegate.callInActivateAndActivatePetService(jsonArray);
         return responseMsg;

     }
    
    
    
    /**
     * 
     * @param jsonArray
     * @return
     * @throws Exception
     * @throws PEPFetchException
     */
    // Web service to ReInitiate Pet
    private String callReInitiatePetService(JSONArray jsonArray) throws Exception,
         PEPFetchException {
         
         String responseMsg = null;
         responseMsg = workListDisplayDelegate.callReInitiatePetService(jsonArray);
         return responseMsg;

     }
    

    /**
     * This method will handle the Action from the portlet.
     *
     * @param request the request
     * @param response the response
     * @throws Exception the exception
     */

    public void handleActionRequest(ActionRequest request, ActionResponse response)
            throws Exception {
            LOGGER.info("WorkListDisplayPortlet:handleActionRequest:Enter");   
            
            LOGGER.info("selectedOrin ****************"+request.getParameter("selectedOrin"));
            LOGGER.info("imageStatus ****************"+request.getParameter("imageStatus"));
            LOGGER.info("contentStatus on click of the hyper link for ipc ****************"+request.getParameter("contentStatus"));
    
        //IPC from worklist display portlet to image pet portlet
        if((request.getParameter("imageStatus")!=null && !request.getParameter("imageStatus").isEmpty()) && request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null)
        {
            
           LOGGER.info("selectedOrin ****************"+request.getParameter("selectedOrin"));
           ImageDetails imageDetails = new ImageDetails();
           imageDetails.setUserData((UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA));
           imageDetails.setOrinNumber(request.getParameter("selectedOrin"));
           imageDetails.setImageStatus(request.getParameter("imageStatus"));
           response.setEvent(WorkListDisplayConstants.IMAGE_DETAILS, imageDetails);
            
        }
        
        //IPC from worklist display portlet to content pet portlet
        if((request.getParameter("contentStatus")!=null && !request.getParameter("contentStatus").isEmpty())  && request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null)
        {
            
           LOGGER.info("contentStatus selectedOrin ****************"+request.getParameter("selectedOrin"));
           ContentPetDetails contentPetDetails = new ContentPetDetails();
           contentPetDetails.setUserData((UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA));
           contentPetDetails.setOrinNumber(request.getParameter("selectedOrin"));
           contentPetDetails.setContentStatus(request.getParameter("contentStatus"));
           LOGGER.info(" contentPetDetails.setUserData****************"+ contentPetDetails.getUserData());
           LOGGER.info("  contentPetDetails.setOrinNumber****************"+ contentPetDetails.getOrinNumber());
           LOGGER.info("  contentPetDetails.getContentStatus****************"+ contentPetDetails.getContentStatus());
           LOGGER.info("contentStatus setting event ****************");
           response.setEvent(WorkListDisplayConstants.CONTENT_PET_DETAILS, contentPetDetails);
           LOGGER.info("after contentStatus setting event ****************" + response.getClass());
            
        }
       
    LOGGER.info("Dep no from the action method"+request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM));
        if(null!=request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM)){
            response.setRenderParameter(WorkListDisplayConstants.DEPT_NO_PARAM, request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM));
        }
        if((request.getParameter("createManualPet")!=null && !request.getParameter("createManualPet").isEmpty())  && request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null){
            LOGGER.info("createManualPet  inside ****************"+request.getParameter("createManualPet"));
            UserData custuser =  (UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA);
            response.setEvent(WorkListDisplayConstants.LOGGEDIN_USER_DETAILS, (Serializable) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)); 
        }   
        
       
        
    }
    
    
    
    /* (non-Javadoc)
     * @see org.springframework.web.portlet.mvc.Controller#handleRenderRequest(javax.portlet.RenderRequest, javax.portlet.RenderResponse)
     */
    public ModelAndView handleRenderRequest(RenderRequest request,
            RenderResponse response) throws Exception {
        LOGGER.info("WorkListDisplayController:handleRenderRequest:Enter");
        // Setting the Userdata for Testing purpose since the Login screen is not working because of DBdesign change.
        workListDisplayForm = new WorkListDisplayForm();
        
        Properties prop= PropertiesFileLoader.getExternalLoginProperties();
        getUserDetailsFromLoginScreen(request);
        ArrayList departmentDetailsListToLoadPet = new ArrayList();
        mv = new ModelAndView(WorkListDisplayConstants.MODEL_VIEW_NAME);
        mv.addObject(WorkListDisplayConstants.IS_PET_AVAILABLE,WorkListDisplayConstants.NO_VALUE);
        
        //Advance Search
        populatingAdvanceSearchDefaultValues(); 
        
        if(request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null){
            UserData custuser =  (UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA);
            String pepUserId="";
            //Handling the Internal user
            if(custuser.isInternal()){
                //Setting Editable or not
                assignRole(workListDisplayForm,custuser.getRoleName());
                
                assignRole(workListDisplayForm,"dca");
                mv.addObject(WorkListDisplayConstants.IS_INTERNAL,WorkListDisplayConstants.YES_VALUE);
                pepUserId = custuser.getBelkUser().getLanId();
                LOGGER.info("This is from Reneder Internal User:"+pepUserId);
                workListDisplayForm.setPepUserID(pepUserId);
                ArrayList depListFromDB = workListDisplayDelegate.getSavedDepartmentDetailsByPepUserId(pepUserId);
                //keeping the current department list in the form
                workListDisplayForm.setSelectedPepDepartmentFromDB(depListFromDB);
                departmentDetailsListToLoadPet= (ArrayList) populateDepartmentDetailsFromDB(depListFromDB);
                if(departmentDetailsListToLoadPet.size()>0){
                    workListDisplayForm.setSelectedDepartmentFromDB(departmentDetailsListToLoadPet);
                }else{//Internal First time Login
                    //Get the department details 
                    LOGGER.info("WorkListDisplayController:This is first time login internal user get the Department details using XML query input is LAN ID");
                    List firstTimedeptdetailsFromADSE = workListDisplayDelegate.getDepartmentDetailsForInernalFirstTimeLogin(custuser.getBelkUser().getLanId());
                    LOGGER.info("searchedDeptdetailsFromADSE..Size" + firstTimedeptdetailsFromADSE.size());
                    if(firstTimedeptdetailsFromADSE.size()>0){
                        workListDisplayForm.setFirstTimesearchedDeptdetailsFromADSE(firstTimedeptdetailsFromADSE);
                    }
                    mv.addObject(WorkListDisplayConstants.IS_PET_AVAILABLE,WorkListDisplayConstants.YES_VALUE);//This is to show the Department section
                    workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.PET_NOT_FOUND_FIRST_LOGIN));
                    workListDisplayForm.setTotalNumberOfPets("0");
                }
                //User may enter the department no Directly overriding the dep details with entered one
                if(null!=request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM) && request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM).length()>1){
                    LOGGER.info("This is from render method, Internal User entered the dep details directly in the box");
                    String depNo=request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM);
                    DepartmentDetails departmentDetails = new DepartmentDetails();
                    departmentDetails.setId(depNo);
                    departmentDetailsListToLoadPet = new ArrayList();
                    departmentDetailsListToLoadPet.add(departmentDetails);   
                }
               
            }else{//Handling External User
              //Setting Editable or not
                LOGGER.info("Handling External User Setting Editable or not-----------------------------");
                LOGGER.info("Before assigning role for external user-----------------------------");
                assignRole(workListDisplayForm,custuser.getRoleName());
                LOGGER.info("After assigning role for external user-----------------------------");
                LOGGER.info("workListDisplayForm.getRoleEditable() for external user-----------------------------"+workListDisplayForm.getRoleEditable());
                LOGGER.info("********----------before setting vendor email-------------------");
                workListDisplayForm.setVendorEmail(custuser.getVpUser().getUserEmailAddress());
                LOGGER.info("********-------------after setting vendor email----------------");
                LOGGER.info("Supplier ID from the Event processing**************************"+custuser.getVpUser().getUserid());
                
                mv.addObject(WorkListDisplayConstants.IS_INTERNAL,WorkListDisplayConstants.NO_VALUE);
                LOGGER.info("This is from Reneder External User and got the Dep details from DB");
                pepUserId = custuser.getVpUser().getPepUserID();
                LOGGER.info("This is from Reneder External User:"+pepUserId);
                ArrayList depListFromDB = workListDisplayDelegate.getSavedDepartmentDetailsByPepUserId(pepUserId);
                workListDisplayForm.setPepUserID(pepUserId);
                //keeping the current department list in the form
                workListDisplayForm.setSelectedPepDepartmentFromDB(depListFromDB);
                //Formating the Department details to display in the JSP
                departmentDetailsListToLoadPet= (ArrayList) populateDepartmentDetailsFromDB(depListFromDB);
                if(departmentDetailsListToLoadPet.size()>0){
                    workListDisplayForm.setSelectedDepartmentFromDB(departmentDetailsListToLoadPet);
                }else{ // First time External 
                    LOGGER.info("WorkListDisplayController:This is first time login External user get the Department details using XML query input is LAN ID");
                    // getting the all department details from ADSE table using XML query using supplier id and supplier email 
                    List firstTimedeptdetailsFromADSE = workListDisplayDelegate.getDepartmentDetailsForExternalFirstTimeLogin(custuser.getVpUser().getUserEmailAddress());
                    if(firstTimedeptdetailsFromADSE.size()>0){
                        workListDisplayForm.setFirstTimesearchedDeptdetailsFromADSE(firstTimedeptdetailsFromADSE);
                    }
                    // getting the PET details on base of supplier id(vendorID) from ADSE table.
                     workFlowList =  workListDisplayDelegate.getPetDetailsByVendor(custuser.getVpUser().getUserEmailAddress(),custuser.getVpUser().getUserid());
                     workListDisplayForm.setWorkFlowlist(workFlowList);
                     mv.addObject(WorkListDisplayConstants.IS_PET_AVAILABLE,WorkListDisplayConstants.YES_VALUE);
                     //Handling sorting and Pagination
                     //Default sorting. needs to remove if the sorted list is coming from SQL quey
                     String selectedColumn=WorkListDisplayConstants.COMPLETION_DATE;
                     handlingSorting(selectedColumn);
                   //Default Pagination  
                     int selectedPageNumber = 1;
                     if(null!=request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)){
                         selectedPageNumber = Integer.valueOf(request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)); 
                     }
                     handlingPagination(selectedPageNumber);
                     workListDisplayForm.setSelectedPage(String.valueOf(selectedPageNumber));
                }
               //User may enter the dep no Directly so overriding the dep details with entered one
                if(null!=request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM) && request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM).length()>1){
                    LOGGER.info("This is from Reneder External User and enter the dep details directly in the box");
                    String depNo=request.getParameter(WorkListDisplayConstants.DEPT_NO_PARAM);
                    DepartmentDetails departmentDetails = new DepartmentDetails();
                    departmentDetails.setId(depNo);
                    departmentDetailsListToLoadPet = new ArrayList();
                    departmentDetailsListToLoadPet.add(departmentDetails);  
                }
            }
        
            if(null!=departmentDetailsListToLoadPet && departmentDetailsListToLoadPet.size()>0){
                mv.addObject(WorkListDisplayConstants.IS_PET_AVAILABLE,WorkListDisplayConstants.YES_VALUE);
                //Getting the  Pet Details 
                
                String email = null;
                if(custuser!=null && custuser.getVpUser()!=null && custuser.getVpUser().getUserEmailAddress()!=null) {
                    email = custuser.getVpUser().getUserEmailAddress();
                }
                
                workFlowList =  workListDisplayDelegate.getPetDetailsByDepNos(departmentDetailsListToLoadPet,email);
                
                if(workFlowList!=null && workFlowList.size()>0){
                //Default sorting. needs to remove if the sorted list is coming from SQL query
                workListDisplayForm.setPetNotFound(null);
                String selectedColumn=WorkListDisplayConstants.COMPLETION_DATE;
                handlingSorting(selectedColumn);
              //Default Pagination  
                int selectedPageNumber = 1;
                if(null!=request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)){
                    selectedPageNumber = Integer.valueOf(request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)); 
                }
                handlingPagination(selectedPageNumber);
                workListDisplayForm.setSelectedPage(String.valueOf(selectedPageNumber));
                }else{//There is no PET for searched content
                    workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.PET_NOT_FOUND));
                    workListDisplayForm.setTotalNumberOfPets("0");
                }
                
            }
         
            mv.addObject(WorkListDisplayConstants.WORK_FLOW_FORM, workListDisplayForm);  
        } 
             LOGGER.info("WorkListDisplayController:handleRenderRequest:Exit");
            return mv;

    }
    
 
/**
 * This method will populate the Advance search with the Default value, Drop downs etc
 * @throws IOException 
 */
private void populatingAdvanceSearchDefaultValues() throws IOException {
    Properties prop= PropertiesFileLoader.getExternalLoginProperties();
    
    AdvanceSearch advanceSearch = new AdvanceSearch();
    //Setting the Image status default DropDownvalues
    List imageStatusDropDownValues = new ArrayList<ImageStatusDropValues>();
    ImageStatusDropValues initialted= new ImageStatusDropValues();
    initialted.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    initialted.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_INITIATED));
    
    ImageStatusDropValues readyForReview= new ImageStatusDropValues();
    readyForReview.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    readyForReview.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_READYFORREVIEW));
    
    ImageStatusDropValues pending= new ImageStatusDropValues();
    pending.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    pending.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_PENDING));
    
    ImageStatusDropValues imageNotApproved= new ImageStatusDropValues();
    imageNotApproved.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    imageNotApproved.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_IMAGE_NOT_APPROVED));
    
    ImageStatusDropValues approved= new ImageStatusDropValues();
    approved.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    approved.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_APPROVED));
    
    ImageStatusDropValues completed= new ImageStatusDropValues();
    completed.setChecked(WorkListDisplayConstants.ADV_SEARCH_NO_VALUE);
    completed.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_COMPLETED));
    
    ImageStatusDropValues closed = new ImageStatusDropValues();
    closed.setChecked(WorkListDisplayConstants.ADV_SEARCH_NO_VALUE);
    closed.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMG_DROPDOWN_CLOSED));
    
    imageStatusDropDownValues.add(initialted);
    imageStatusDropDownValues.add(readyForReview);
   // imageStatusDropDownValues.add(pending);
   // imageStatusDropDownValues.add(imageNotApproved);
   // imageStatusDropDownValues.add(approved);
    imageStatusDropDownValues.add(completed);
    imageStatusDropDownValues.add(closed);
    advanceSearch.setImageStatusDropDown(imageStatusDropDownValues);
    
    //Setting the Content Status
    
    List contentStatusDropDownValues = new ArrayList<ContentStatusDropValues>();
    ContentStatusDropValues initialtedContent= new ContentStatusDropValues();
    initialtedContent.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    initialtedContent.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_INITIATED));
    
    ContentStatusDropValues readyForReviewContent= new ContentStatusDropValues();
    readyForReviewContent.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    readyForReviewContent.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_READYFORREVIEW));
    
    ContentStatusDropValues approvedContent= new ContentStatusDropValues();
    approvedContent.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    approvedContent.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_APPROVED));
    
    ContentStatusDropValues contenetNotApproved= new ContentStatusDropValues();
    contenetNotApproved.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    contenetNotApproved.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_CONTENT_NOT_APPROVED));
    
    
    ContentStatusDropValues completedContent= new ContentStatusDropValues();
    completedContent.setChecked(WorkListDisplayConstants.ADV_SEARCH_NO_VALUE);
    completedContent.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_COMPLETED));
    
    ContentStatusDropValues closedContent= new ContentStatusDropValues();
    closedContent.setChecked(WorkListDisplayConstants.ADV_SEARCH_NO_VALUE);
    closedContent.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_DROPDOWN_CLOSED));
    
    contentStatusDropDownValues.add(initialtedContent);
    contentStatusDropDownValues.add(readyForReviewContent);
  //  contentStatusDropDownValues.add(approvedContent);
  //  contentStatusDropDownValues.add(contenetNotApproved);
    contentStatusDropDownValues.add(completedContent);
    contentStatusDropDownValues.add(closedContent);
    advanceSearch.setContentStatusDropDown(contentStatusDropDownValues);
    
    //Setting the Request Type details
    List requestTypeDropDownValues = new ArrayList<RequestTypeDropValues>();
    RequestTypeDropValues manual= new RequestTypeDropValues();
    manual.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    manual.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_DROPDOWN_MANUAL));
    
    RequestTypeDropValues directShipItem= new RequestTypeDropValues();
    directShipItem.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    directShipItem.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_DROPDOWN_DSI));
    
    RequestTypeDropValues itemAttributeSetup= new RequestTypeDropValues();
    itemAttributeSetup.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    itemAttributeSetup.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_DROPDOWN_IAS));
    
    RequestTypeDropValues po= new RequestTypeDropValues();
    po.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    po.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_DROPDOWN_PO));
    
    
    RequestTypeDropValues grouping= new RequestTypeDropValues();
    grouping.setChecked(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    grouping.setValue(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_DROPDOWN_GROUPING));
    
    requestTypeDropDownValues.add(manual);
    requestTypeDropDownValues.add(directShipItem);
    requestTypeDropDownValues.add(itemAttributeSetup);
    requestTypeDropDownValues.add(po);
  //  requestTypeDropDownValues.add(grouping);
    advanceSearch.setRequestTypeDropDown(requestTypeDropDownValues);
    
    //Setting the Default values for the text boxes
    advanceSearch.setImageStatus(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_IMAGE_TEXT_VALUE));
    advanceSearch.setContentStatus(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_CONTENT_TEXT_VALUE));
    advanceSearch.setRequestType(prop.getProperty(WorkListDisplayConstants.ADV_SEARCH_REQUEST_TEXT_VALUE));
    advanceSearch.setActive("01");
   // advanceSearch.setCreatedToday(WorkListDisplayConstants.ADV_SEARCH_YES_VALUE);
    
    workListDisplayForm.setAdvanceSearch(advanceSearch);
        
    }

/**
 * This method will assign the DCA  role. 
 * @param workListDisplayForm2
 * @param roleName
 */
private void assignRole(WorkListDisplayForm workListDisplayForm2,
        String roleName) {
        if(WorkListDisplayConstants.DCA_ROLE.equalsIgnoreCase(roleName)){
            LOGGER.info("inside the dca role role......"+roleName);
            workListDisplayForm2.setRoleEditable(WorkListDisplayConstants.YES_VALUE);
            //Set role details
          //Completion date edit start
            workListDisplayForm2.setRoleName(WorkListDisplayConstants.DCA_ROLE);
          //Completion date edit end
            
        }
        if(WorkListDisplayConstants.VENDOR.equalsIgnoreCase(roleName)){
            LOGGER.info("inside the vendor role......"+roleName);
            workListDisplayForm2.setRoleEditable(WorkListDisplayConstants.YES_VALUE);
        }
        
        if(WorkListDisplayConstants.READ_ONLY_ROLE.equalsIgnoreCase(roleName)){
            LOGGER.info("inside the read only role......"+roleName);
            workListDisplayForm2.setReadOnlyUser(WorkListDisplayConstants.YES_VALUE);
        } 
        
    }

/**
   * This method is responsible for returning the user object along with hardcoded value.Needs to remove  
   * @param request
   */
    private void getUserDetailsFromLoginScreen(RenderRequest request) {
        if(request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null){
            UserData custuser =  (UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA);
            if(custuser!=null){
                request.getPortletSession().setAttribute(WorkListDisplayConstants.USER_DATA,custuser);
                if(custuser.getBelkUser()!=null){
                  System.out.println(" inside getbelk user "+custuser.getBelkUser());
                    
                }else if(custuser.getVpUser()!=null){
                   // custuser.getVpUser();
                    System.out.println(" inside getVpUser  user "+custuser.getVpUser());
                    
                    
                  /*  UserData custuser=  new UserData() ;
                    Common_Vpuser vpuser= new Common_Vpuser();
                    vpuser.setUserEmailAddress("001binilkumar_j@belk.com");
                    vpuser.setPepUserID("001binilkumar_j@belk.com");
                    custuser.setVpUser(vpuser);
                    custuser.setRoleName("vendor");
                    custuser.setAccessRight("Write");
                    custuser.setInternal(false);*/
                }
                
            }
            
        }
        
      /*
        UserData custuser=  new UserData() ;
        Common_Vpuser vpuser= new Common_Vpuser();
        vpuser.setUserEmailAddress("001binilkumar_j@belk.com");
        vpuser.setPepUserID("001binilkumar_j@belk.com");
        custuser.setVpUser(vpuser);
        custuser.setRoleName("vendor");
        custuser.setAccessRight("Write");
        custuser.setInternal(false);*/
       /* Common_BelkUser belkuser = new Common_BelkUser();
        belkuser.setLanId("003binilkumar_j@belk.com");
        custuser.setBelkUser(belkuser);
        custuser.setRoleName("dca");
        custuser.setInternal(true);*/
        
      
        
    }



    /**
     * This method will populate the DepartmentDetails object from the Department Domain Object array
     * @param depList
     * @return
     */
    private List<DepartmentDetails> populateDepartmentDetailsFromDB(
        ArrayList depList) {
    LOGGER.info("WorkListDisplayController:populateDepartmentDetailsFromDB:Enter");
        ArrayList departmentDetailsList = new ArrayList();
        if(null != depList && depList.size()>0){
            PepDepartment dep = null;
            for(int i=0;i<depList.size();i++){
                DepartmentDetails departmentDetails =new DepartmentDetails();
                dep = (PepDepartment) depList.get(i); 
                LOGGER.info("WorkListDisplayController:populateDepartmentDetailsFromDB:dep.getDeptId()"+dep.getId().getDeptId());
                LOGGER.info("WorkListDisplayController:populateDepartmentDetailsFromDB:dep.getDeptDescription()"+dep.getDeptName());
                departmentDetails.setId(dep.getId().getDeptId());
                departmentDetails.setDesc(dep.getDeptName());
                departmentDetailsList.add(departmentDetails);
            }
        }
        LOGGER.info("WorkListDisplayController:populateDepartmentDetailsFromDB:Exit");
        return departmentDetailsList;
    }



/**
 * This method will handle the sorting logic
 * @param selectedColumn
 * @return
 * @throws ParseException 
 */
    private List<WorkFlow> handlingSorting(String selectedColumn) throws ParseException {
        LOGGER.info("WorkListDisplayController:handlingSorting:Enter");
        findTypeOfSorting(selectedColumn);
        workFlowList = sortWorkFlowList(workFlowList,selectedColumn);
        workListDisplayForm.setSelectedColumn(selectedColumn);
        LOGGER.info("WorkListDisplayController:handlingSorting:Exit");
        return workFlowList;
    }


/**
 * This method will find the type of sorting Ascending or descending and will set the image
 * @param selectedColumn
 */
    private void findTypeOfSorting(String selectedColumn) {
        LOGGER.info("WorkListDisplayController:findTypeOfSorting:Enter");
        if(acendingList==null){
            acendingList = new ArrayList();  
        }
        if(decendingList==null){
            decendingList = new ArrayList();  
        }
        if(acendingList.contains(selectedColumn)){
            workListDisplayForm.setSortingImage(WorkListDisplayConstants.ARROW_DOWN_IMAGE);  
            acendingList.remove(selectedColumn);
            decendingList.add(selectedColumn);
            workListDisplayForm.setSortingAscending(WorkListDisplayConstants.FALSE_VALUE);
        }else if(decendingList.contains(selectedColumn)){
            workListDisplayForm.setSortingImage(WorkListDisplayConstants.ARROW_UP_IMAGE);  
            decendingList.remove(selectedColumn);
            acendingList.add(selectedColumn);
            workListDisplayForm.setSortingAscending(WorkListDisplayConstants.TRUE_VALUE);
        }//DefaultImage setting
        else{
            workListDisplayForm.setSortingImage(WorkListDisplayConstants.ARROW_DOWN_IMAGE); 
            workListDisplayForm.setSortingAscending(WorkListDisplayConstants.FALSE_VALUE);
            decendingList.add(selectedColumn);
        }
        LOGGER.info("WorkListDisplayController:findTypeOfSorting:Exit");
        
    }

/**
 * This method will sort the WorkFlowList 
 * @param workFlowList2
 * @param selectedColumn
 * @return
 * @throws ParseException 
 */

    public List<WorkFlow> sortWorkFlowList(List<WorkFlow> workFlowList2,
        String selectedColumn) throws ParseException {
        LOGGER.info("WorkListDisplayController:sortWorkFlowList:Enter");
        List<WorkFlow> sortedList= new ArrayList();
      if(WorkListDisplayConstants.COMPLETION_DATE.equalsIgnoreCase(selectedColumn)){
          LOGGER.info("This is Completion date sorting.");
          WorkFlow currentWorkFlow = null;
          WorkFlow nextWorkFlow = null;
          if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
              //Ascending Sorting
              LOGGER.info("This is Comletion date sorting....Ascending is true"); 
              for(int i=0;i< workFlowList2.size();i++){
                  
                      for (int j = i + 1; j < workFlowList2.size(); j++) 
                      {
                          if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                                  currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                                  nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                              if(null!=currentWorkFlow.getCompletionDate() && null!=nextWorkFlow.getCompletionDate()){
                                 
                                    if(DateUtil.stringToDate(currentWorkFlow.getCompletionDate()).after(DateUtil.stringToDate(nextWorkFlow.getCompletionDate()))){
                                        Collections.swap(workFlowList2, i, j);
                                      }
                               
                              }
                          }
                        
                      }
              }
              sortedList = workFlowList2;
          }else{
              //Descending sorting
              LOGGER.info("This is Completion date sorting....Ascending is false"); 
              for(int i=0;i< workFlowList2.size();i++){
                  for (int j = i + 1; j < workFlowList2.size(); j++) 
                  {
                      if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                          currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                          nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                          if(null!=currentWorkFlow.getCompletionDate() && null!=nextWorkFlow.getCompletionDate()){
                             
                                if(DateUtil.stringToDate(currentWorkFlow.getCompletionDate()).before(DateUtil.stringToDate(nextWorkFlow.getCompletionDate()))){
                                    Collections.swap(workFlowList2, i, j);
                                  }
                          }
                      }
                    
                  }
          }
              sortedList = workFlowList2;
          }
      }else if(WorkListDisplayConstants.IMAGE_STATUS.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of imageStatus"+workListDisplayForm.getSortingAscending()); 
        LOGGER.info("This is imageStatus sorting....");
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is imageStatus sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                       
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getImageStatus() && null!=nextWorkFlow.getImageStatus()){
                                  if(currentWorkFlow.getImageStatus().compareTo(nextWorkFlow.getImageStatus()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is imageStatus sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        if(null!=currentWorkFlow.getCompletionDate() && null!=nextWorkFlow.getCompletionDate()){
                            if(null!=currentWorkFlow.getImageStatus() && null!=nextWorkFlow.getImageStatus()){
                                if(currentWorkFlow.getImageStatus().compareTo(nextWorkFlow.getImageStatus()) < 0 ){
                                    Collections.swap(workFlowList2, i, j);
                                  }
                          }
                        }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.CONTENT_STATUS.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of contentStatus"+workListDisplayForm.getSortingAscending()); 
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is contentStatus sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getContentStatus() && null!=nextWorkFlow.getContentStatus()){
                                  if(currentWorkFlow.getContentStatus().compareTo(nextWorkFlow.getContentStatus()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is contentStatus sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getContentStatus() && null!=nextWorkFlow.getContentStatus()){
                                if(currentWorkFlow.getContentStatus().compareTo(nextWorkFlow.getContentStatus()) < 0 ){
                                    Collections.swap(workFlowList2, i, j);
                                  }
                            
                          }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.PRODUCT_NAME.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of productName"+workListDisplayForm.getSortingAscending()); 
        LOGGER.info("This is productName sorting....");
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is productName sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getProductName() && null!=nextWorkFlow.getProductName()){
                                  if(currentWorkFlow.getProductName().compareTo(nextWorkFlow.getProductName()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is productName sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        LOGGER.info("currentWorkFlow.getProductName()"+currentWorkFlow.getProductName()); 
                        LOGGER.info("nextWorkFlow.getProductName()"+nextWorkFlow.getProductName()); 
                            if(null!=currentWorkFlow.getProductName() && null!=nextWorkFlow.getProductName()){
                                if(currentWorkFlow.getProductName().compareTo(nextWorkFlow.getProductName()) < 0 ){
                                    Collections.swap(workFlowList2, i, j);
                                  }
                            
                          }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.VENDOR_STYLE.equalsIgnoreCase(selectedColumn)){
          LOGGER.info("Sorting happening on base of vendorStyle"+workListDisplayForm.getSortingAscending()); 
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is vendorStyle sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                       
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getVendorStyle() && null!=nextWorkFlow.getVendorStyle()){
                                  if(currentWorkFlow.getVendorStyle().compareTo(nextWorkFlow.getVendorStyle()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                              
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is vendorStyle sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        if(null!=currentWorkFlow.getVendorStyle() && null!=nextWorkFlow.getVendorStyle()){
                            if(currentWorkFlow.getVendorStyle().compareTo(nextWorkFlow.getVendorStyle()) < 0 ){
                                Collections.swap(workFlowList2, i, j);
                              }
                        
                      }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.VENDOR_NAME.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of vendorName"+workListDisplayForm.getSortingAscending());  
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is vendorName sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                       
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getVendorName() && null!=nextWorkFlow.getVendorName()){
                                  if(currentWorkFlow.getVendorName().compareTo(nextWorkFlow.getVendorName()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                              
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is vendorName sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        if(null!=currentWorkFlow.getVendorName() && null!=nextWorkFlow.getVendorName()){
                            if(currentWorkFlow.getVendorName().compareTo(nextWorkFlow.getVendorName()) < 0 ){
                                Collections.swap(workFlowList2, i, j);
                              }
                        
                      }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.DEPT_COLUMN.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of dept"+workListDisplayForm.getSortingAscending()); 
        LOGGER.info("This is dept sorting....");
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is dept sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                       
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getDeptId() && null!=nextWorkFlow.getDeptId()){
                                  if(currentWorkFlow.getDeptId().compareTo(nextWorkFlow.getDeptId()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                              
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is dept sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        if(null!=currentWorkFlow.getDeptId() && null!=nextWorkFlow.getDeptId()){
                            if(currentWorkFlow.getDeptId().compareTo(nextWorkFlow.getDeptId()) < 0 ){
                                Collections.swap(workFlowList2, i, j);
                              }
                        
                      }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else if(WorkListDisplayConstants.ORIN_GROUP.equalsIgnoreCase(selectedColumn)){
        LOGGER.info("Sorting happening on base of orinGroup"+workListDisplayForm.getSortingAscending()); 
        LOGGER.info("This is orinGroup sorting....");
        WorkFlow currentWorkFlow = null;
        WorkFlow nextWorkFlow = null;
        if(workListDisplayForm.getSortingAscending().equalsIgnoreCase(WorkListDisplayConstants.TRUE_VALUE)){
            //Ascending Sorting
            LOGGER.info("This is orinGroup sorting....Ascending is true"); 
            for(int i=0;i< workFlowList2.size();i++){
                
                    for (int j = i + 1; j < workFlowList2.size(); j++) 
                    {
                       
                        if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                            currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                            nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                            if(null!=currentWorkFlow.getOrinNumber() && null!=nextWorkFlow.getOrinNumber()){
                                  if(currentWorkFlow.getOrinNumber().compareTo(nextWorkFlow.getOrinNumber()) > 0 ){
                                      Collections.swap(workFlowList2, i, j);
                                    }
                              
                            }
                        }
                      
                    }
            }
            sortedList = workFlowList2;
        }else{
            //Descending sorting
            LOGGER.info("This is orinGroup sorting....Ascending is false"); 
            for(int i=0;i< workFlowList2.size();i++){
                for (int j = i + 1; j < workFlowList2.size(); j++) 
                {
                    if(null!=workFlowList2.get(i) && null!=workFlowList2.get(j)){
                        currentWorkFlow = (WorkFlow)workFlowList2.get(i);
                        nextWorkFlow = (WorkFlow)workFlowList2.get(j);
                        if(null!=currentWorkFlow.getOrinNumber() && null!=nextWorkFlow.getOrinNumber()){
                            if(currentWorkFlow.getOrinNumber().compareTo(nextWorkFlow.getOrinNumber()) < 0 ){
                                Collections.swap(workFlowList2, i, j);
                              }
                        
                      }
                    }
                  
                }
        }
            sortedList = workFlowList2;
        }
      }else{
          LOGGER.info("Sorting happening on unlisting selected"+workListDisplayForm.getSortingAscending()); 
      }
      LOGGER.info("WorkListDisplayController:sortWorkFlowList:Exit");
      return sortedList;
    }

/**
 * This method will handle the pagination on base of page number.
 * @param selectedPageNumber
 * @throws IOException 
 */

    private void handlingPagination(int selectedPageNumber) throws IOException {
        LOGGER.info("WorkListDisplayController:handlingPagination:Enter");
        //Setting the number of records
        int numberOfPets = workFlowList.size();
        workListDisplayForm.setTotalNumberOfPets(String.valueOf(numberOfPets));
        //Setting the limit
        Properties prop= PropertiesFileLoader.getExternalLoginProperties();
        //LOGGER.info("Values are getting from properties file"+prop.getProperty(WorkListDisplayConstants.PAGE_LIMIT));
        workListDisplayForm.setPageLimit(prop.getProperty(WorkListDisplayConstants.PAGE_LIMIT));
        //Setting the number of pages
        int numberOfPages = 1;
        int pageLimit = Integer.parseInt(prop.getProperty(WorkListDisplayConstants.PAGE_LIMIT));
       
        if(numberOfPets>pageLimit){
            numberOfPages = numberOfPets/pageLimit;
            numberOfPages+=1;
        }
        //Setting the page list
        ArrayList<String> pageNumberList = new ArrayList();
        for(int i=0;i<numberOfPages;i++){
            pageNumberList.add(String.valueOf(i+1)); 
        }
        workListDisplayForm.setPageNumberList(pageNumberList);
        //Setting the first page Default
        LOGGER.info("Selected Page number is=="+selectedPageNumber);
        int startindex= 0;
        int endIndex= 9;
        startindex= (selectedPageNumber * pageLimit) - pageLimit;
        endIndex= (selectedPageNumber * pageLimit) - 1;
        //Logic for last page
        if(selectedPageNumber==numberOfPages  ){
            endIndex =  workFlowList.size();  
        }
        LOGGER.info("Start index is =="+startindex+"endIndex is =="+endIndex);
        List currentPageworkFlowList = workFlowList.subList(startindex, endIndex);
        workListDisplayForm.setSelectedPage(String.valueOf(selectedPageNumber));
        workListDisplayForm.setTotalPageno(String.valueOf(numberOfPages));
        workListDisplayForm.setPreviousCount(String.valueOf(selectedPageNumber-1));
        workListDisplayForm.setNextCount(String.valueOf(selectedPageNumber+1));
        workListDisplayForm.setWorkFlowlist(currentPageworkFlowList);
        
        
       
        
        if(numberOfPages>1) {
            workListDisplayForm.setDisplayPagination("yes");
            workListDisplayForm.setStartIndex(String.valueOf(startindex+1));
            workListDisplayForm.setEndIndex(String.valueOf(endIndex+1));
        } else {
            workListDisplayForm.setStartIndex(String.valueOf(startindex+1));
            workListDisplayForm.setEndIndex(String.valueOf(endIndex));
        }
        
        LOGGER.info("WorkListDisplayController:handlingPagination:Exit");   
    }

/**
 * This method will handle the Event request and to fetch the user details from the login portlet
 * 
 */

    public void handleEventRequest(EventRequest request, EventResponse response)
            throws Exception {
        LOGGER.info("WorkListDisplayController:handleEventRequest:Enter "); 
        Event event = request.getEvent();
        if(event.getName()!=null ){
            
            LOGGER.info("WorkListDisplayController:handlingPagination:Enter 1 "); 
        if(event.getName().equals(WorkListDisplayConstants.USER_DATA_OBJ)){ 
            LOGGER.info("WorkListDisplayController:handlingPagination:Enter 2 "); 
            UserData custuser= (UserData) event.getValue();
            
                      
            if(null!=custuser){     
                Common_BelkUser belkUser = ( Common_BelkUser)custuser.getBelkUser();
             LOGGER.info("WorkListDisplayController:handlingPagination:Enter 2 ");
             if(custuser.getVpUser()!=null)
             {
                if(null!=custuser.getVpUser().getUserEmailAddress()){
                    LOGGER.info("This is from Event Email Id********************"+custuser.getVpUser().getUserEmailAddress());  
                }else if(null!=custuser.getRoleName()){
                    LOGGER.info("This is from Event Role name********************"+custuser.getRoleName());    
                }else if(null!=custuser.getAccessRight()){
                    LOGGER.info("This is from Access********************"+custuser.getAccessRight());
                }
        
             }
             if(null!=belkUser) {
                 LOGGER.info("belkUser.getLanId() 1111**************");
              if(null!=belkUser.getLanId()) {
                 LOGGER.info("belkUser.getLanId() ******************"+belkUser.getLanId());  
              }
             }
            request.getPortletSession().setAttribute(WorkListDisplayConstants.USER_DATA,custuser);
        }
        }
        
        }
    }

/**
 * This method will take care of handleResourceRequest, handles all Ajax calls
 */

    @Override
    public ModelAndView handleResourceRequest(ResourceRequest request,
        ResourceResponse response) throws Exception {
        Properties prop= PropertiesFileLoader.getExternalLoginProperties();
        
        
        //Inactivate/Activate Integration
        
      //Inactivate and Activate flow
        String statusParameter = request.getParameter(WorkListDisplayConstants.PET_STATUS_PARAMETER);
        LOGGER.info("statusParameter:::"+ statusParameter);
        if(WorkListDisplayConstants.INACTIVATE_PET_ACTION.equalsIgnoreCase(statusParameter)){
            //Inactivate pets call
            inActivatePets(request);
        }else if(WorkListDisplayConstants.ACTIVATE_PET_ACTION.equalsIgnoreCase(statusParameter)){
            //Activate pets call
            activatePets(request);
        }
        
        
        
        //Pagination flow
        String pageNo ="1";
        if(null!=request.getParameter(WorkListDisplayConstants.AJAX_PAGE_NO)&& request.getParameter(WorkListDisplayConstants.AJAX_PAGE_NO).length()>0){
            pageNo = request.getParameter(WorkListDisplayConstants.AJAX_PAGE_NO);
        LOGGER.info("Page Number="+pageNo);
        handlingPagination(Integer.parseInt(pageNo));
        }
        //Sorting Flow
        String selectedColumn = WorkListDisplayConstants.COMPLETION_DATE;
        if(null!=request.getParameter(WorkListDisplayConstants.AJAX_SELECTED_COLUMN_NAME) && request.getParameter(WorkListDisplayConstants.AJAX_SELECTED_COLUMN_NAME).length()>0){
            selectedColumn = request.getParameter(WorkListDisplayConstants.AJAX_SELECTED_COLUMN_NAME);
            LOGGER.info("Selected Column is="+selectedColumn);
            handlingSorting(selectedColumn);
            
            handlingPagination(1);
            }
        // Department Flow
        String departmentOperation = null;
        String selectedDepartments = null;
        if(null!=request.getParameter(WorkListDisplayConstants.AJAX_DEPARTMENT_OPERATION)&& request.getParameter(WorkListDisplayConstants.AJAX_DEPARTMENT_OPERATION).length()>0){
            departmentOperation = request.getParameter(WorkListDisplayConstants.AJAX_DEPARTMENT_OPERATION);
            // Department save and close Flow
                if(WorkListDisplayConstants.DEP_SAVE_CLOSE.equalsIgnoreCase(departmentOperation)){
                    LOGGER.info("Handling Save and Close operation.operation..." + departmentOperation);
                    if(null!=request.getParameter("selectedDepartments")&& request.getParameter("selectedDepartments").length()>0){
                    selectedDepartments =  request.getParameter("selectedDepartments"); 
                    LOGGER.info("Departmentts.." + selectedDepartments);
                    //Get the department details array by using comma separator
                    String[] selectedDeptArray = selectedDepartments.split(",");
                    List <PepDepartment> updatedPePDetailsToDb = new ArrayList();
                    //Getting the department details using id if existing in the current DB and to add new Department details
                    if(workFlowList!=null) {
                        workListDisplayForm.setTotalNumberOfPets(String.valueOf(workFlowList.size()));
                    } else {
                        workListDisplayForm.setTotalNumberOfPets("0");
                    }
                    
                    boolean skipIfFoundExistingDept = false;
                    boolean skipIfFoundSecondSection = false;
                    for(int i=0;i<selectedDeptArray.length;i++){
                        skipIfFoundExistingDept = false;
                        skipIfFoundSecondSection = false;
                        LOGGER.info("Departmentts. in for." + selectedDeptArray[i]);
                        if(null!=workListDisplayForm.getSelectedPepDepartmentFromDB()){
                            LOGGER.info("Department is from PEP details from DB********************" );
                            for(int j=0;j<workListDisplayForm.getSelectedPepDepartmentFromDB().size();j++){
                                PepDepartment pepdetails =workListDisplayForm.getSelectedPepDepartmentFromDB().get(j);
                                if(pepdetails.getId().getDeptId().equalsIgnoreCase(selectedDeptArray[i].trim())){
                                    updatedPePDetailsToDb.add(pepdetails);  
                                    LOGGER.info("Adding PepDept details"+pepdetails.getId().getDeptId());
                                    skipIfFoundExistingDept = true;
                                }
                               
                            }
                        }
                        // Adding the newly added Department details
                        if(!skipIfFoundExistingDept){
                        if(null!=workListDisplayForm.getSearchedDeptdetailsFromADSE()){
                            LOGGER.info("Department is from PEP details Search********************" );
                            for(int k=0;k<workListDisplayForm.getSearchedDeptdetailsFromADSE().size();k++){
                                DepartmentDetails deptDetails =workListDisplayForm.getSearchedDeptdetailsFromADSE().get(k);
                                if(deptDetails.getId().equalsIgnoreCase(selectedDeptArray[i].trim())){
                                    //Creating new PepDepartmentDetails to update in DB
                                    PepDepartment pepDetails = new PepDepartment();
                                    pepDetails.setDeptName(deptDetails.getDesc());
                                    PepDepartmentPK pepDepartmentPk= new PepDepartmentPK();
                                    pepDepartmentPk.setDeptId(deptDetails.getId());
                                    pepDepartmentPk.setPepUserId(workListDisplayForm.getPepUserID());
                                    pepDetails.setId(pepDepartmentPk);
                                    updatedPePDetailsToDb.add(pepDetails);  
                                    LOGGER.info("Adding PepDept details"+pepDetails.getId().getDeptId());
                                    skipIfFoundSecondSection = true;
                                 }
                           }
                         }
                        
                      //Adding the Searched Department for Initial time login added
                        if(!skipIfFoundSecondSection){
                            if(null!=workListDisplayForm.getFirstTimesearchedDeptdetailsFromADSE()){
                                LOGGER.info("Department is from PEP details first time *******************" );
                                for(int k=0;k<workListDisplayForm.getFirstTimesearchedDeptdetailsFromADSE().size();k++){
                                    DepartmentDetails deptDetails =workListDisplayForm.getFirstTimesearchedDeptdetailsFromADSE().get(k);
                                    if(deptDetails.getId().equalsIgnoreCase(selectedDeptArray[i].trim())){
                                        //Creating new PepDepartmentDetails to update in DB
                                        PepDepartment pepDetails = new PepDepartment();
                                        pepDetails.setDeptName(deptDetails.getDesc());
                                        PepDepartmentPK pepDepartmentPk= new PepDepartmentPK();
                                        pepDepartmentPk.setDeptId(deptDetails.getId());
                                        pepDepartmentPk.setPepUserId(workListDisplayForm.getPepUserID());
                                        pepDetails.setId(pepDepartmentPk);
                                        updatedPePDetailsToDb.add(pepDetails);  
                                        LOGGER.info("Adding PepDept details"+pepDetails.getId().getDeptId());
                                     }
                               }
                             }
                            }
                        
                        
                        }
                        
                       
                    }
                    
                    LOGGER.info("Length of final updatedPePDetailsToDb "+updatedPePDetailsToDb.size());
                   //Sending the updated pepdetails list to DB layer for update operation
                    boolean isPepDeptUpdated = workListDisplayDelegate.updatePepDeptDetails(updatedPePDetailsToDb,workListDisplayForm.getPepUserID());
                    LOGGER.info("isPepDeptUpdated="+isPepDeptUpdated);
                    if(isPepDeptUpdated){//Table is updated
                        //Setting the PepDepartment details into the FORM
                        workListDisplayForm.setSelectedPepDepartmentFromDB(updatedPePDetailsToDb);
                      //updating the new Department details to display in department filter
                        LOGGER.info("After Table update");
                        ArrayList updatedDepartmentFromDB = new ArrayList();
                        for(int i=0;i<updatedPePDetailsToDb.size();i++){
                            DepartmentDetails depDetails = new DepartmentDetails();  
                            depDetails.setId(updatedPePDetailsToDb.get(i).getId().getDeptId());
                            depDetails.setDesc(updatedPePDetailsToDb.get(i).getDeptName());
                            updatedDepartmentFromDB.add(depDetails);
                        }
                        LOGGER.info("updatedDepartmentFromDB size"+updatedDepartmentFromDB.size());
                        workListDisplayForm.setSelectedDepartmentFromDB(updatedDepartmentFromDB);
                        //Clearing the Search result operation from Form
                        List closeSearchedDeptdetailsFromADSE = new ArrayList();
                        workListDisplayForm.setSearchedDeptdetailsFromADSE(closeSearchedDeptdetailsFromADSE);
                        
                      //Clearing the first time Search result operation from Form
                        List closeFirstSearchedDeptdetailsFromADSE = new ArrayList();
                        workListDisplayForm.setFirstTimesearchedDeptdetailsFromADSE(closeFirstSearchedDeptdetailsFromADSE);
                        // Clearing if there is result not found is there
                        workListDisplayForm.setDeptSearchResult("");
                        
                       // Getting the PET details on base of departments
                        
                        workFlowList =  workListDisplayDelegate.getPetDetailsByDepNos(updatedDepartmentFromDB,workListDisplayForm.getVendorEmail());
                        if(workFlowList.size()>0){
                            workListDisplayForm.setPetNotFound(null); 
                        }else{//There is no PET for searched content
                            workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.PET_NOT_FOUND)); 
                            workListDisplayForm.setTotalNumberOfPets("0");//Setting the pet count to Zero
                        }
                        LOGGER.info("updatedDepartmentFromDB size"+updatedDepartmentFromDB.size());
                        workListDisplayForm.setWorkFlowlist(workFlowList);
                        workListDisplayForm.setTotalNumberOfPets(String.valueOf(workFlowList.size()));
                        
                        
                    }else{
                        LOGGER.info("Table is not updated");
                    }
                    
                }
            }
                //Department Search operation
                if(WorkListDisplayConstants.DEP_SEARCH.equalsIgnoreCase(departmentOperation)){
                    //Clearing the Existing searched Result
                    ArrayList emptySearchedDeptdetailsFromADSE = new ArrayList();
                    workListDisplayForm.setSearchedDeptdetailsFromADSE(emptySearchedDeptdetailsFromADSE);
                    workListDisplayForm.setDeptSearchResult("");
                    String departmentsToBesearched = null;
                    LOGGER.info("Handling Save and Close operation.operation." + departmentOperation);
                    if(null!=request.getParameter(WorkListDisplayConstants.DEP_TO_SEARCH)&& request.getParameter(WorkListDisplayConstants.DEP_TO_SEARCH).length()>0){
                    departmentsToBesearched =  request.getParameter(WorkListDisplayConstants.DEP_TO_SEARCH); 
                    LOGGER.info("Departmentts.." + departmentsToBesearched);
                    List searchedDeptdetailsFromADSE = workListDisplayDelegate.getDepartmentDetailsFromADSE(departmentsToBesearched);
                    List<String> selectedDeptsList=null;
                    
                    
                    if(null!=request.getParameter("selectedDepartments")&& request.getParameter("selectedDepartments").length()>0) {
                        
                        String selectedDepts =  request.getParameter("selectedDepartments");                       
                        //Get the department details array by using comma separator
                        String[] selectedDeptArray = selectedDepts.split(",");   
                        
                        selectedDeptsList = new ArrayList<String>(Arrays.asList(selectedDeptArray));
                        
                    }
                   
                    
                    boolean isDuplicateDeptAdded = false;
                    if(selectedDeptsList !=null && selectedDeptsList.size() > 0) {                        
                        int iDupDeptFound=0;
                                                
                        for(String selString :selectedDeptsList ) {
                            
                            Iterator<DepartmentDetails> iter = searchedDeptdetailsFromADSE.iterator();
                            while (iter.hasNext()) {
                                DepartmentDetails departmentDetails = (DepartmentDetails)iter.next();
                                
                                String id =  departmentDetails.getId();
                                
                                if(selString!=null && id!=null && selString.trim().equals(id.trim())) { 
                                  
                                    LOGGER.info("\n--->> TESTING .. removing " + id.trim());
                                    iter.remove();
                                    iDupDeptFound++;                                                           
                                }
                                    
                            }
                            
                            
                        }
                        
                        if(iDupDeptFound > 0) {
                            isDuplicateDeptAdded = true;
                        }
                        
                       
                        
                    }
                    LOGGER.info("searchedDeptdetailsFromADSE..Sizee." + searchedDeptdetailsFromADSE.size());
                    //For advance Search
                    LOGGER.info("advanceSearchClicked++++++++++>>>" + request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CLICKED));
                    String advanceSearchClicked = WorkListDisplayConstants.ADV_SEARCH_NO_VALUE;
                    advanceSearchClicked =  request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CLICKED);
                    LOGGER.info("advanceSearchClicked++++++++++" + advanceSearchClicked);
                    workListDisplayForm.setAdvSearchClicked(advanceSearchClicked);
                    LOGGER.info("AdvSearch Clicked Values11111::" +workListDisplayForm.getAdvSearchClicked());
                    if(searchedDeptdetailsFromADSE.size()>0){
                        workListDisplayForm.setSearchedDeptdetailsFromADSE(searchedDeptdetailsFromADSE);
                    }else{
                        if(!isDuplicateDeptAdded) {
                            workListDisplayForm.setDeptSearchResult(prop.getProperty(WorkListDisplayConstants.WORKLIST_DEPT_NOT_FOUND_MSG));
                        }
                    }
                   }
                  }
                // Close operation
                if(WorkListDisplayConstants.DEP_CLOSE.equalsIgnoreCase(departmentOperation)){
                    LOGGER.info("Handling Close operation.operation." + departmentOperation);
                    List closeSearchedDeptdetailsFromADSE = new ArrayList();
                    workListDisplayForm.setSearchedDeptdetailsFromADSE(closeSearchedDeptdetailsFromADSE);
                    workListDisplayForm.setDeptSearchResult("");
                   }
                //Clear operation
                if(WorkListDisplayConstants.DEP_CLEAR.equalsIgnoreCase(departmentOperation)){
                    LOGGER.info("Handling clear operation.operation." + departmentOperation);
                    List closeSearchedDeptdetailsFromADSE = new ArrayList();
                    workListDisplayForm.setSearchedDeptdetailsFromADSE(closeSearchedDeptdetailsFromADSE);
                    workListDisplayForm.setDeptSearchResult("");
                    
                   }
        }
        
        //Advance Search Flow
        if(null!=request.getParameter(WorkListDisplayConstants.ADV_SEARCH_OPERATION_PARAM)&& request.getParameter(WorkListDisplayConstants.ADV_SEARCH_OPERATION_PARAM).length()>0){
            String advSearchOperation=request.getParameter(WorkListDisplayConstants.ADV_SEARCH_OPERATION_PARAM);
            LOGGER.info("This is from Advance Search Operation" + advSearchOperation);   
            if(WorkListDisplayConstants.ADV_SEARCH_OPERATION_RESET.equals(advSearchOperation)){
                LOGGER.info("This is from Advance Search Reset operation");
                populatingAdvanceSearchDefaultValues();
            }
            if(WorkListDisplayConstants.ADV_SEARCH_OPERATION_SAVEANDCLOSE.equals(advSearchOperation)){
                LOGGER.info("This is from Advance Search Save and Close operation");
                String departmentDetails = request.getParameter("advSelectedDepartments");
                LOGGER.info("Department Details  Advance Search and close operation"+departmentDetails);
                List<ClassDetails> classDetailsList = new ArrayList<ClassDetails>();
                classDetailsList = workListDisplayDelegate.getClassDetailsByDepNos(departmentDetails);
                populateClassDetailsInAdvanceSearch(classDetailsList);
                //Retaining already selected values
                setAdvanceSearchfieldsFromAjax(request);
            }
            if(WorkListDisplayConstants.ADV_SEARCH_OPERATION_SEARCH.equals(advSearchOperation)){
                //Retaining already selected values
                setAdvanceSearchfieldsFromAjax(request);
                //Getting the PET details on base of the Advance search selections
                
                mv.addObject(WorkListDisplayConstants.IS_PET_AVAILABLE,WorkListDisplayConstants.YES_VALUE);
                   if(null!=workListDisplayForm.getAdvanceSearch() && !workListDisplayForm.getAdvanceSearch().isAllFieldEmpty()){
                    //Getting the  Pet Details   
                    workFlowList =  workListDisplayDelegate.getPetDetailsByAdvSearch(workListDisplayForm.getAdvanceSearch());
                    LOGGER.info("Line 1412.."+workFlowList.size());
                        if(workFlowList.size()>0){
                        //Default sorting. needs to remove if the sorted list is coming from SQL query
                        workListDisplayForm.setPetNotFound(null);
                        String advSelectedColumn=WorkListDisplayConstants.COMPLETION_DATE;
                        handlingSorting(advSelectedColumn);
                      //Default Pagination  
                        int selectedPageNumber = 1;
                        if(null!=request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)){
                            selectedPageNumber = Integer.valueOf(request.getParameter(WorkListDisplayConstants.CURRENT_PAGE_NUMBER)); 
                        }
                        handlingPagination(selectedPageNumber);
                        workListDisplayForm.setSelectedPage(String.valueOf(selectedPageNumber));
                        }else{//There is no PET for searched content
                            //Fix for Defect 177
                            if(setAdvanceSearchfieldsForVendorStyleAjax(request)){
                                workFlowList =  workListDisplayDelegate.getPetDetailsByAdvSearch(workListDisplayForm.getAdvanceSearch());
                                LOGGER.info("Line 1428.."+workFlowList.size());
                                if(workFlowList.size()==0){
                                    
                                    LOGGER.info("venstyle***** no pet found" +workListDisplayForm.getAdvanceSearch().getVendorStyle());
                                    List<WorkFlow> emptystyleListForWorkListDisplayforVendorStyle = new ArrayList<WorkFlow>();
                                    workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.NO_PET_FOUND_FOR_VENDOR_STYLE));
                                    LOGGER.info("Vendor--------::" +workListDisplayForm.getPetNotFound());
                                    workListDisplayForm.setTotalNumberOfPets("0");
                                    workListDisplayForm.setWorkFlowlist(emptystyleListForWorkListDisplayforVendorStyle); 
                                }//177 End
                            }else{
                                LOGGER.info("Line 1439..");
                                List<WorkFlow> emptystyleListForWorkListDisplay = new ArrayList<WorkFlow>();
                                workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.PET_NOT_FOUND));
                                workListDisplayForm.setTotalNumberOfPets("0");
                                workListDisplayForm.setWorkFlowlist(emptystyleListForWorkListDisplay);
                            }
                        }
                    }else
                    {//No Criteria selected
                        LOGGER.info("Line 1448..");
                    List<WorkFlow> emptystyleListForWorkListDisplay = new ArrayList<WorkFlow>();
                    workListDisplayForm.setPetNotFound(prop.getProperty(WorkListDisplayConstants.PET_NOT_FOUND));
                    workListDisplayForm.setTotalNumberOfPets("0");
                    workListDisplayForm.setWorkFlowlist(emptystyleListForWorkListDisplay); 
                }
                
                
            }
        
        }
      //Completion Date Change Start
        if(null!=request.getParameter("completionDate")&& request.getParameter("completionDate").length()>0){
            LOGGER.info("This is from Completion date change to invoke the web service ************************");
            LOGGER.info("orinNumber is:"+request.getParameter("orinNumber"));
            LOGGER.info("StyleorinNumber is:"+request.getParameter("styleorinNumber"));
            String orinNumberfdu=request.getParameter("orinNumber");
            String styleOrinNumberfdu=request.getParameter("styleorinNumber");
            String completionDatefdu=request.getParameter("completionDate"); 
            String isCmpDateEarlier = request.getParameter("isCmpDateEarlier");
            //invoke web service to update the completion date
           // boolean completeDateStatus =  workListDisplayDelegate.updateCompletionDate(orinNumberfdu,completionDatefdu);
          
            //Code change to send the Orin Number at Style color level
            
            styleOrinNumberfdu = filterStyleOrinNumberfdu(styleOrinNumberfdu);            
            LOGGER.info("orinNumberfdu::" + orinNumberfdu +"::styleOrinNumberfdu::"+styleOrinNumberfdu + "::completionDatefdu::" + completionDatefdu + "::isCmpDateEarlier::" +isCmpDateEarlier);
            
            //String completeDateStatus =  updateCompletionDate(orinNumberfdu,completionDatefdu);
            
            String completeDateStatusStyle =  updateCompletionDate(styleOrinNumberfdu,completionDatefdu);
            
            //updateTheCurrentPetListWithNewCompletionDate(orinNumberfdu,styleOrinNumberfdu,completionDatefdu);
            
            if("Completion date update is successful".equalsIgnoreCase(completeDateStatusStyle)){
               // updateTheCurrentPetListWithNewCompletionDate(orinNumberfdu,styleOrinNumberfdu,completionDatefdu);
                if("Y".equalsIgnoreCase(isCmpDateEarlier.trim())){
                    updateCompletionDate(orinNumberfdu,completionDatefdu);
                    //updateTheCurrentPetListWithNewCompletionDate(orinNumberfdu,styleOrinNumberfdu,completionDatefdu);
                }
                workListDisplayForm.setUpdateCompletionDateMsg("Completion date update is successful");
            }else{
                workListDisplayForm.setUpdateCompletionDateMsg("Completion date not updated successfully");
            }
            
        }
       
        
    //Completion Date Change End    
        mv.addObject(WorkListDisplayConstants.WORK_FLOW_FORM, workListDisplayForm);
        return mv;
    }
    
    /**
     * This method will update the current PET list latest Date.
     * @param completionDatefdu2 
     * @param styleOrinNumberfdu 
     * @param completionDate
     */
  private void updateTheCurrentPetListWithNewCompletionDate(
    String orinNumberfdu, String styleOrinNumberfdu, String completionDatefdu2) {
      LOGGER.info("updateTheCurrentPetListWithNewCompletionDate: Start");
      List<WorkFlow> existingWorkLIst = workListDisplayForm.getWorkFlowlist();
      for(WorkFlow currentFlow:existingWorkLIst){
          if(currentFlow.getOrin().equalsIgnoreCase(orinNumberfdu)){
              //This is the parent of selected Style color
              List<StyleColor> existingStyleList = currentFlow.getStyleColor();
              for(StyleColor currentstylecolor:existingStyleList){
                  if(currentstylecolor.getOrinNumber().equalsIgnoreCase(styleOrinNumberfdu)){
                      //This is the selected Style color
                      LOGGER.info("Match Found...");
                      currentstylecolor.setCompletionDate(completionDatefdu2);
                      break;
                  }
              }
              //Checking any earliest completion date with other style colors 
              String newStyleCompletionDate = "";
             
              try{
              SimpleDateFormat newFormat = new SimpleDateFormat("mm/dd/yyyy");
              newStyleCompletionDate = completionDatefdu2;
              Date newCompletionDate = (Date)newFormat.parse(completionDatefdu2);
             LOGGER.info("------- finalDate"+newStyleCompletionDate);        
             
             
              //Date newCompletionDate = new Date(completionDatefdu2);
              //String newStyleCompletionDate = completionDatefdu2;
              for(StyleColor currentstylecolor:existingStyleList){
                  
                  if(null!=currentstylecolor.getCompletionDate() && currentstylecolor.getCompletionDate().length()>0 ){
                        
                      
                          SimpleDateFormat newFormat2 = new SimpleDateFormat("mm/dd/yyyy");
                          //newStyleCompletionDate = completionDatefdu2;
                          Date completionDate = (Date)newFormat2.parse(currentstylecolor.getCompletionDate());
                         LOGGER.info("------- finalDate"+newCompletionDate);        
                         
                         
                     //Date completionDate = new Date(currentstylecolor.getCompletionDate());
                     //if any of the Style color is less than new date given then take the earliest date as new completionDate
                         
                     if(completionDate.before(newCompletionDate)){
                         LOGGER.info("------- completionDate"+completionDate);
                         LOGGER.info("newCompletionDate"+newCompletionDate);
                         newStyleCompletionDate =  currentstylecolor.getCompletionDate(); 
                        
                     }
                  }
                 
                  
              }
              } catch (ParseException e) {        
                  e.printStackTrace();
              }
              //setting the earliest date as completion date of Style level
              LOGGER.info("Match newStyleCompletionDate..." +newStyleCompletionDate);
              currentFlow.setCompletionDate("");
              currentFlow.setCompletionDate(newStyleCompletionDate);
             
          }
      }
      workListDisplayForm.setWorkFlowlist(existingWorkLIst);
      LOGGER.info("updateTheCurrentPetListWithNewCompletionDate: End");
}
    
    
  /**
  
   * This method will populate the Advance search object with the parameter values  
   * @param request
   */
private void setAdvanceSearchfieldsFromAjax(ResourceRequest request) {
   
    LOGGER.info("This is from Advance Search Search operation: Enter");
    
    String completionDateFrom ="";
    String completionDateTo = "";
    String createdToday = "";
    
    
    String departmentDetails = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_SELECTED_DEPT_PARAM);
    LOGGER.info("departmentDetails:"+departmentDetails);
    completionDateFrom = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_COMPLETION_DATE_FROM_PARAM);
    LOGGER.info("completionDateFrom:"+completionDateFrom);
    completionDateTo = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_COMPLETION_DATE_TO_PARAM);
    LOGGER.info("completionDateTo:"+completionDateTo);
    String imageStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_IMAGE_STATUS_PARAM);
    LOGGER.info("imageStatus:"+imageStatus);
    String contentStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CONTENT_STATUS_PARAM);
    LOGGER.info("contentStatus:"+contentStatus);
    String petStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_PET_STATUS_PARAM);
    LOGGER.info("petStatus:"+petStatus);
    String requestType = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_REQUEST_TYPE_PARAM);
    LOGGER.info("requestType:"+requestType);
    String orinNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_ORIN_PARAM);
    LOGGER.info("orinNumber:"+orinNumber);
    String vendorStyle = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_VENDOR_STYLE_PARAM);
    LOGGER.info("vendorStyle:"+vendorStyle);
    String upc = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_UPC_PARAM);
    LOGGER.info("upc:"+upc);
    String classNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CLASS_NUMBER_PARAM);
    LOGGER.info("classNumber:"+classNumber);
    createdToday = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CREATED_TODAY_PARAM);
    LOGGER.info("createdToday::"+createdToday);
    String finalTodayDate = request.getParameter("finalTodayDate");
    
    String vendorNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_VENDOR_NUMBER_PARAM);
    LOGGER.info("vendor Number::"+vendorNumber);
    
    //Fix for Defect #186 Start
    if("yes".equalsIgnoreCase(createdToday)){
        LOGGER.info("yes Selected");
        //LOGGER.info("finalTodayDate:::" +finalTodayDate);
        completionDateFrom = "";
        completionDateTo =  "";
        LOGGER.info("completionDateFromRadio::"+completionDateFrom);
        LOGGER.info("completionDateToRadio::"+completionDateTo);
        /*if(null != finalTodayDate){
            completionDateFrom = "";
            completionDateTo =  "";
            LOGGER.info("completionDateFromRadio::"+completionDateFrom);
            LOGGER.info("completionDateToRadio::"+completionDateTo);
        }else{
            LOGGER.info("finalTodayDate not set:");
        }*/
        
    }else{
        LOGGER.info("yes not Selected");
    }
    
    
    
    AdvanceSearch adSearch = workListDisplayForm.getAdvanceSearch();
    if(adSearch == null){
        adSearch = new AdvanceSearch();
        adSearch.setAllFieldEmpty(false);
    }
    if(StringUtils.isNotBlank(departmentDetails)||
            StringUtils.isNotBlank(completionDateFrom)||
            StringUtils.isNotBlank(completionDateTo)||
            StringUtils.isNotBlank(imageStatus)||
            StringUtils.isNotBlank(contentStatus)||
            StringUtils.isNotBlank(petStatus)||
            StringUtils.isNotBlank(requestType)||
            StringUtils.isNotBlank(orinNumber)||
            StringUtils.isNotBlank(vendorStyle)||
            StringUtils.isNotBlank(upc)||
            StringUtils.isNotBlank(classNumber)||
            StringUtils.isNotBlank(createdToday)||
            StringUtils.isNotBlank(vendorNumber))
           {
        adSearch.setAllFieldEmpty(false);
    }else{
        LOGGER.info("All Advance Search Fields are Empty.");
        adSearch.setAllFieldEmpty(true); 
    }
    adSearch.setDeptNumbers(departmentDetails);
    adSearch.setDateFrom(completionDateFrom);
    adSearch.setDateTo(completionDateTo);
    adSearch.setImageStatus(imageStatus);
    adSearch.setContentStatus(contentStatus);
    adSearch.setActive(petStatus);
    adSearch.setInActive(petStatus);
    adSearch.setClosed(petStatus);
    adSearch.setRequestType(requestType);
    adSearch.setOrin(orinNumber);
    adSearch.setVendorStyle(vendorStyle);
    adSearch.setUpc(upc);
    adSearch.setClassNumber(classNumber);
    adSearch.setCreatedToday(createdToday);
    adSearch.setVendorNumber(vendorNumber);
    
    workListDisplayForm.setAdvanceSearch(adSearch);
    LOGGER.info("This is from Advance Search Search operation: Exit");
}

//Fix for Defect 177 Start
private boolean setAdvanceSearchfieldsForVendorStyleAjax(ResourceRequest request) {
    
    LOGGER.info("This is from Advance Search Search operation venStyle: Enter");
    boolean venStyle = false ;
    String departmentDetails = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_SELECTED_DEPT_PARAM);
    LOGGER.info("departmentDetails:"+departmentDetails);
    String completionDateFrom = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_COMPLETION_DATE_FROM_PARAM);
    LOGGER.info("completionDateFrom:"+completionDateFrom);
    String completionDateTo = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_COMPLETION_DATE_TO_PARAM);
    LOGGER.info("completionDateTo:"+completionDateTo);
    String imageStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_IMAGE_STATUS_PARAM);
    LOGGER.info("imageStatus:"+imageStatus);
    String contentStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CONTENT_STATUS_PARAM);
    LOGGER.info("contentStatus:"+contentStatus);
    String petStatus = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_PET_STATUS_PARAM);
    LOGGER.info("petStatus:"+petStatus);
    String requestType = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_REQUEST_TYPE_PARAM);
    LOGGER.info("requestType:"+requestType);
    String orinNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_ORIN_PARAM);
    LOGGER.info("orinNumber:"+orinNumber);
    String vendorStyle = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_VENDOR_STYLE_PARAM);
    LOGGER.info("vendorStyle:"+vendorStyle);
    String upc = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_UPC_PARAM);
    LOGGER.info("upc:"+upc);
    String classNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CLASS_NUMBER_PARAM);
    LOGGER.info("classNumber:"+classNumber);
    String createdToday = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_CREATED_TODAY_PARAM);
    LOGGER.info("createdToday:"+createdToday);
    String vendorNumber = request.getParameter(WorkListDisplayConstants.ADV_SEARCH_VENDOR_NUMBER_PARAM);
    LOGGER.info("vendor Number::"+vendorNumber);
    
    AdvanceSearch adSearch = workListDisplayForm.getAdvanceSearch();
    if(adSearch == null){
        adSearch = new AdvanceSearch();
        adSearch.setAllFieldEmpty(false);
    }
    if(StringUtils.isBlank(departmentDetails)&&
            StringUtils.isBlank(completionDateFrom)&&
            StringUtils.isBlank(completionDateTo)&&
            StringUtils.isBlank(imageStatus)&&
            StringUtils.isBlank(contentStatus)&&
            StringUtils.isBlank(petStatus)&&
            StringUtils.isBlank(requestType)&&
            StringUtils.isBlank(orinNumber)&&
            StringUtils.isNotBlank(vendorStyle)&&
            StringUtils.isBlank(upc)&&
            StringUtils.isBlank(classNumber)&&
            StringUtils.isBlank(createdToday)&&
            StringUtils.isBlank(vendorNumber))
           {
        adSearch.setAllFieldEmpty(false);
        venStyle = true ;
    }else{
        LOGGER.info("All Advance Search Fields are Empty.");
        venStyle = false;
        adSearch.setAllFieldEmpty(true); 
        
    }
    adSearch.setDeptNumbers(departmentDetails);
    adSearch.setDateFrom(completionDateFrom);
    adSearch.setDateTo(completionDateTo);
    adSearch.setImageStatus(imageStatus);
    adSearch.setContentStatus(contentStatus);
    adSearch.setActive(petStatus);
    adSearch.setInActive(petStatus);
    adSearch.setClosed(petStatus);
    adSearch.setRequestType(requestType);
    adSearch.setOrin(orinNumber);
    adSearch.setVendorStyle(vendorStyle);
    adSearch.setUpc(upc);
    adSearch.setClassNumber(classNumber);
    adSearch.setCreatedToday(createdToday);
    adSearch.setVendorNumber(vendorNumber);
    
    LOGGER.info("ImageStatus from request venstyle::" + adSearch.getImageStatus());
    LOGGER.info("VendorStyle from request venstyle::" + adSearch.getVendorStyle());

    workListDisplayForm.setAdvanceSearch(adSearch);
    LOGGER.info("This is from Advance Search Search operation venstyle: Exit1111::" + venStyle);
    return venStyle;
}
//Fix for Defect 177 End

/**
 * This method will set the class details in to the Advance search
 * @param classDetailsList
 */
private void populateClassDetailsInAdvanceSearch(
    List<ClassDetails> classDetailsList) {
    LOGGER.info("This is from ApopulateClassDetailsInAdvanceSearch: Enter" ); 
    AdvanceSearch adSearch = workListDisplayForm.getAdvanceSearch();
    if(adSearch == null){
        adSearch = new AdvanceSearch();
    }
    if(null!=classDetailsList && classDetailsList.size()>0){
        LOGGER.info("classDetailsList size="+classDetailsList.size() );
        adSearch.setClassDetails(classDetailsList);
    }
    workListDisplayForm.setAdvanceSearch(adSearch);
    LOGGER.info("This is from ApopulateClassDetailsInAdvanceSearch: Exit" );
}

//New Requirement Inactivate/Activate Integrate

/**
 * This method is responsible for calling Inactivate Pets onselection
 * @param request
 */
private void inActivatePets(ResourceRequest request) {
    LOGGER.info("Entering:: inActivatePets method controller");
    String []orinNumbersArray = null;      
    String orinNo = ""; 
    String petStatus ="";
    String orinNumbers = request.getParameter(WorkListDisplayConstants.SELECTED_ROWS_FOR_ACTIVATE_OR_INACTIVATE);
    String responseMsg = "";
    String petStatusCode ="";
    JSONArray jsonArray = new JSONArray();
    
    AdvanceSearch advSearch = new AdvanceSearch();
    
    
    
    if(null != orinNumbers){
        orinNumbersArray = orinNumbers.split(",");
    }
    
    if(null != orinNumbersArray){
        LOGGER.info("orinNumbersArray length inactivate::" + orinNumbersArray.length);
        for(String orinAndStatus : orinNumbersArray){
            orinAndStatus = orinAndStatus.replaceAll("\\s+", "");
            //LOGGER.info("orinAndStatus::::" +orinAndStatus);
            orinNo = orinAndStatus.substring(0, orinAndStatus.indexOf("_"));
            //LOGGER.info("orinNo111:" +orinNo);
            orinNo = orinNo.replaceAll("\\s+", "");//Removed WhiteSpace from StyleColor Orin no. if any for service call
            //LOGGER.info("orinNo222:" +orinNo);
            
            if(orinNo.length() > 12){                
                orinNo = orinNo.substring(0, 12);
                LOGGER.info("Length gt 12-->" + orinNo);
                
            }
            
            petStatus = orinAndStatus.substring(orinAndStatus.indexOf("_")+1);
            //LOGGER.info("petStatus1111:" +petStatus);
            LOGGER.info("orinNo::"+ orinNo +"petStatus::"+ petStatus);
            try{
                String petStatusCodeToService = petStatusCodePassToService(petStatus,petStatusCode);
                LOGGER.info("petStatusCodeToService::" + petStatusCodeToService);
                JSONObject jsonStyle = populateActivateInactiveJson(orinNo.trim(),petStatusCodeToService);
                jsonArray.put(jsonStyle);
                LOGGER.info("json Object inActivatePets petId::.. "+ jsonStyle.getString("petId"));
                
            }catch (Exception e) {                    
                LOGGER.info("inside catch for inActivatePets()...controller");
                e.printStackTrace();
                
            }
        }//End of for loop
            try {
                responseMsg = callInActivateAndActivatePetService(jsonArray);
                LOGGER.info("responseMsg_code Controller inActivate::-->" +responseMsg);
            }catch(PEPFetchException eService){
               LOGGER.info("Exception Block in Controller::32");
               eService.printStackTrace();                    
            }catch (Exception e) {
               LOGGER.info("Exception Block in Controller::21");
               e.printStackTrace();
            }
    }
    LOGGER.info("Exiting:: inActivatePets method controller");
} //End Inactivate



/**
 *  This method is responsible for calling Activate Pets onselection
 * @param request
 */
private void activatePets(ResourceRequest request) {
    LOGGER.info("Entering:: activatePets method controller");
    
    String []orinNumbersArray = null;       
    String orinNumbers = request.getParameter(WorkListDisplayConstants.SELECTED_ROWS_FOR_ACTIVATE_OR_INACTIVATE);
    String orinNo ="";
    String petStatus ="";
    String responseMsg ="";
    String petStatusCode ="";
    
    String updatedBy = "";
    
    if(request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA)!=null){
        LOGGER.info("userData----in activate");
        UserData custuser =  (UserData) request.getPortletSession().getAttribute(WorkListDisplayConstants.USER_DATA);        
        if(custuser.isInternal()){                     
            updatedBy = custuser.getBelkUser().getLanId();
            LOGGER.info("Activate Internal user---:"+updatedBy);
        }
    }
            
    
    JSONArray jsonArray = new JSONArray();
    
    if(null != orinNumbers){
        orinNumbersArray = orinNumbers.split(",");
    }      
    
    if(null != orinNumbersArray){
        for(String orinAndStatus : orinNumbersArray){
            orinAndStatus = orinAndStatus.replaceAll("\\s+", "");
            orinNo = orinAndStatus.substring(0, orinAndStatus.indexOf("_"));
            orinNo = orinNo.replaceAll("\\s+", "");//Removed WhiteSpace from StyleColor Orin no. if any for service call
            
            
            //petStatus = orinAndStatus.substring(orinAndStatus.indexOf("_")+1);
            //LOGGER.info("orinNo::"+ orinNo +"petStatus::"+ petStatus);
            LOGGER.info("orinNo***Reinitiate::"+ orinNo);
            
            if(orinNo.length() > 12){                
                orinNo = orinNo.substring(0, 12);
                LOGGER.info("Length gt 12 Reinitiate-->" + orinNo);                
            }
            
            try{
                //String petStatusCodeToService = petStatusCodePassToService(petStatus,petStatusCode);populateReInitiateJson
                //JSONObject jsonStyle = populateActivateInactiveJson(orinNo.trim(),petStatusCodeToService);
                
                JSONObject jsonStyle = populateReInitiateJson(orinNo.trim(),updatedBy);
                jsonArray.put(jsonStyle);
                
                LOGGER.info("json Object activate123 petId::.. "+ jsonStyle.getString("petId"));
            }catch (Exception e) {                   
                LOGGER.info("inside catch for activatePets()...controller");
                e.printStackTrace();
            }
        }//End of forLoop
        //Service call
        try {
            //responseMsg = callInActivateAndActivatePetService(jsonArray);
            responseMsg = callReInitiatePetService(jsonArray);
            LOGGER.info("responseMsg_code Controller Activate::" +responseMsg);
        }catch(PEPFetchException eService){
           LOGGER.info("Exception Block in activate Controller::11");
           eService.printStackTrace();                    
        }catch (Exception e) {
           LOGGER.info("Exception Block in activate Controller::12");
           e.printStackTrace();
        }
    }
    LOGGER.info("Exiting:: activatePets method controller");
}//End Activate


/**
 * Method to pass JSON Array to call the Inactivate/Activate service
 * @param petId
 * @param petStatus
 * @return
 */
public JSONObject populateActivateInactiveJson(String petId,String petStatus) {
    JSONObject jsonObj = new JSONObject();
    try {          
        jsonObj.put(WorkListDisplayConstants.PET_ID,petId);
        jsonObj.put(WorkListDisplayConstants.PET_STATUS,petStatus);
    } catch (JSONException e) {
        LOGGER.info("Exeception in parsing the jsonObj");
        e.printStackTrace();
    }
    return jsonObj;
 }


public JSONObject populateReInitiateJson(String petId,String updatedBy) {
    LOGGER.info("populateReInitiateJson----->Controller");
    JSONObject jsonObj = new JSONObject();
    try {          
        
        jsonObj.put(WorkListDisplayConstants.PET_ID,petId);
        jsonObj.put("UpdatedBy",updatedBy);
        
        //jsonObj.put(WorkListDisplayConstants.PET_STATUS,petStatus);
    } catch (JSONException e) {
        LOGGER.info("Exeception in parsing the jsonObj");
        e.printStackTrace();
    }
    return jsonObj;
 }

/**
 * This method is used to replace petStatus with the service code to pass on the service call
 * @param petStatus
 * @param petStatusCode
 * @return
 */
private String petStatusCodePassToService(String petStatus,String petStatusCode){        
    LOGGER.info("Entering petStatusCodeToService.. Controller::");
    if("Initiated".equalsIgnoreCase(petStatus)){
        petStatusCode = "01";
    }else if("Completed".equalsIgnoreCase(petStatus)){
        petStatusCode = "02";
    }else if("Approved".equalsIgnoreCase(petStatus)){
        petStatusCode = "03";
    }else if("Rejected".equalsIgnoreCase(petStatus)){
        petStatusCode = "04";
    }else if("Deactivated".equalsIgnoreCase(petStatus)){
        petStatusCode = "05";
    }else if(null == petStatus || StringUtils.isBlank(petStatus) || "undefined" == petStatus){
        LOGGER.info("petStatus is not valid in db");
        petStatusCode = "";
    }
    //Passing inactivate pets to make activate and vice-e-versa
    if(petStatusCode=="01" || petStatusCode=="02" || petStatusCode== "03"){
        petStatusCode = "05";
    }else if(petStatusCode=="05"){
        petStatusCode = "01";
    }
    LOGGER.info("petStatusCode::" +petStatusCode);
    LOGGER.info("Exiting petStatusCodeToService.. Controller::");
    return petStatusCode;
}


/**
 * @param OrinNum
 * @param compDate
 * @return
 */
private String updateCompletionDate(String OrinNum,String compDate){
    JSONArray jsonArray = new JSONArray();
    String responseMsg ="";
    JSONObject jsonCompletionDt = populateCompletionDateJson(OrinNum.trim(),compDate);
    jsonArray.put(jsonCompletionDt);
    LOGGER.info("json Object updateCompletionDate petId::.. "+ jsonCompletionDt.getString("petId"));
    try{
        responseMsg = callSaveCompletionDateService(jsonArray);
        LOGGER.info("responseMsg_code Controller Activate::" +responseMsg);
    }catch(Exception ex){
        LOGGER.info("inside catch for service call---......Controller");
        ex.printStackTrace();
    }
    
    return responseMsg;
}
/**
 * @param completionDateInfo
 * @return
 * @throws Exception
 * @throws PEPFetchException
 */
private String callSaveCompletionDateService(JSONArray completionDateInfo) throws Exception,
    PEPFetchException {
    
    String responseMsg = null;
    responseMsg = workListDisplayDelegate.callSaveCompletionDateService(completionDateInfo);
    return responseMsg;

}
/**
 * @param petId
 * @param completionDate
 * @return
 */
public JSONObject populateCompletionDateJson(String petId,String completionDate) {
     JSONObject jsonObj = new JSONObject();
     LOGGER.info("------- in parsing the jsonObj111111111");
     try {          
         jsonObj.put("petId",petId);
         
        String completionDateStr = ConvertDate(completionDate);
        LOGGER.info("------- in parsing the jsonObj111111111"+completionDateStr);
        jsonObj.put("completionDate",completionDateStr);
         
     } catch (JSONException e) {
         LOGGER.info("Exeception in parsing the jsonObj111111111");
         e.printStackTrace();
     }
     return jsonObj;
  }

public String ConvertDate(String completionDate){
    String finalDate = null;
    try {
    //String start_dt = "2011-01-01";
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd"); 
    Date date = (Date)formatter.parse(completionDate);
    SimpleDateFormat newFormat = new SimpleDateFormat("mm/dd/yyyy");
     finalDate = newFormat.format(date);
    LOGGER.info("------- finalDate"+finalDate);        
    
    } catch (ParseException e) {        
        e.printStackTrace();
    }
    return finalDate;
  }


/**
 * This method will return 
 * @param styleOrinNumberfdu
 * @return
 */
private String filterStyleOrinNumberfdu(String styleOrinNumberfdu) {
String styleOrinNumberfduL = "";
// eg:220709046 020 Grey
if(null!=styleOrinNumberfdu){
    styleOrinNumberfduL = styleOrinNumberfdu.replaceAll(" ", "");
    if(styleOrinNumberfduL.length()>12){
        styleOrinNumberfduL = styleOrinNumberfduL.substring(0,12);   
    }
}
LOGGER.info("styleOrinNumberfduL"+styleOrinNumberfduL);
return styleOrinNumberfduL;
}

}
