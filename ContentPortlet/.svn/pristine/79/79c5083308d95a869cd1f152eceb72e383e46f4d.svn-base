package com.belk.pep.delegate;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.belk.pep.attributes.AttributesBean;
import com.belk.pep.attributes.ItemIdBean;
import com.belk.pep.constants.ContentScreenConstants;
import com.belk.pep.exception.checked.PEPFetchException;
import com.belk.pep.exception.checked.PEPServiceException;
import com.belk.pep.model.PetsFound;
import com.belk.pep.service.ContentService;
import com.belk.pep.util.PropertiesFileLoader;
import com.belk.pep.vo.ChildSkuVO;
import com.belk.pep.vo.ContentHistoryVO;
import com.belk.pep.vo.ContentManagementVO;
import com.belk.pep.vo.CopyAttributesVO;
import com.belk.pep.vo.GlobalAttributesVO;
import com.belk.pep.vo.ItemPrimaryHierarchyVO;
import com.belk.pep.vo.ProductDetailsVO;
import com.belk.pep.vo.StyleInformationVO;
import com.google.gson.Gson;


/**
 * The Class ContentDelegate.
 */
public class ContentDelegate {
	
	/** The Constant LOGGER. */
	private final static Logger LOGGER = Logger.getLogger(ContentDelegate.class.getName()); 	
	

	/** The content service. */
	private ContentService contentService;


    /**
     * Gets the content service.
     *
     * @return the contentService
     */
    public ContentService getContentService() {
        return contentService;
    }


    /**
     * Sets the content service.
     *
     * @param contentService the contentService to set
     */
    public void setContentService(ContentService contentService) {
        this.contentService = contentService;
    }
    
    
    /**
     * Gets the style information.
     *
     * @param orinNumber the orin number
     * @return the style information
     */
    public StyleInformationVO getStyleInformation(String orinNumber)  {
        try {
            return contentService.getStyleInfoFromADSE(orinNumber);
        }
        catch (PEPServiceException serviceException) {
           
            LOGGER.log(Level.SEVERE, serviceException.getMessage());  
        }
        return null;
    }
    
   
    /**
     * Gets the product information.
     *
     * @param orinNumber the orin number
     * @return the product information
     */
    public ProductDetailsVO getProductInformation(String orinNumber)  {
        try {
            return contentService.getProductInfoFromADSE(orinNumber);
        }
        catch (PEPServiceException serviceException) {
           
            LOGGER.log(Level.SEVERE, serviceException.getMessage());  
        }
        return null;
    }

    
    /**
     * Gets the pet list.
     *
     * @param orinNumber the orin number
     * @return the pet list
     */
    public List<PetsFound>  getPetList(String orinNumber)  {
        try {
            return contentService.getStyleAndItsChildFromADSE(orinNumber);
        }
        catch (PEPServiceException serviceException) {
           
            LOGGER.log(Level.SEVERE, serviceException.getMessage());  
        }
        return null;
    }
    
    
    
    /**
     * Gets the style attributes.
     *
     * @param orinNumber the orin number
     * @return the style attributes
     */
   public GlobalAttributesVO getStyleAttributesADSE(String orinNumber)  
        {
            try {
                
                return contentService.getStyleAttributesFromADSE(orinNumber);
            }
            catch (PEPServiceException serviceException) {
               
                LOGGER.log(Level.SEVERE, serviceException.getMessage());  
            }
            return null;  
        }
   
   
   /**
    * Creates the content web service.
    *
    * @param createContentWebServiceReq the create content web service req
    * @return the string
    */
   public String createContentWebService(String createContentWebServiceReq) {
       String webServiceResponseCode = null;
       String webServiceResponseDescription = null;
       String webServiceResponseStatus = null;
       String responseMsg = null;
       String webServiceResponse = null;
       LOGGER.info("createContentWebService called");
       Properties prop =   PropertiesFileLoader.getPropertyLoader(ContentScreenConstants.MESS_PROP);
       String targetURL =  prop.getProperty(ContentScreenConstants.DEV_SERVICE_URL);
       
       LOGGER.info("createContentWebService URL = "+targetURL);
       
       try{
           
           URL createWebServiceURL = new URL(targetURL);
           HttpURLConnection con = (HttpURLConnection)createWebServiceURL.openConnection();
           con.setDoOutput(true);
           con.setDoInput(true);

           con.setRequestProperty("Content-Type", "application/json;");
           con.setRequestProperty("Accept", "application/json");
           con.setRequestProperty("Method", "POST");
           OutputStream os = con.getOutputStream();
           os.write(createContentWebServiceReq.getBytes("UTF-8"));
           os.close();


           StringBuilder sb = new StringBuilder();  
           int httpResult =con.getResponseCode();
           
           System.out.println("HTTP Result from service =  "+httpResult);
           
           if(httpResult == HttpURLConnection.HTTP_OK ||
                   httpResult == HttpURLConnection.HTTP_CREATED )
           
           {
               
           LOGGER.info("HTTP Result when OK =  "+httpResult);
           BufferedReader br = new BufferedReader(new   InputStreamReader(con.getInputStream(),"utf-8"));  

               String line = null;
               while ((line = br.readLine()) != null)
               {  
               sb.append(line + "\n");  
               }
                br.close(); 
                webServiceResponse = sb.toString();
                System.out.println("Response from createContentWebService = "+ webServiceResponse);  
                //parse web service response
                JSONObject jsonResponseObject = new JSONObject(webServiceResponse);
                
                webServiceResponseCode = jsonResponseObject.getString("code");
                webServiceResponseDescription = jsonResponseObject.getString("description");
                webServiceResponseStatus = jsonResponseObject.getString("status");
                
             
                if(webServiceResponseStatus.equals("SUCCESS")){
                    
                    responseMsg ="The content has been updated successfully. ";
                }  
                
                else {
                    
                    responseMsg ="The content  updation failed , Contact system administrator.";
                    LOGGER.severe("Error returned from content update web service = " + webServiceResponseDescription);
                }
           }
           else
           {
               System.out.println("OTHER THAN 200 OR 201");
               System.out.println("HTTP call response code and response message =  "+con.getResponseCode()+" , "+ con.getResponseMessage());
               responseMsg ="The content cannot  be updated HTTP Error, contact  the System Administrator.";
           }  
           
       }catch(Exception ex){
           LOGGER.severe("Exception Occurred createContentWebService =  "+ex.getCause());
           
       }

       return responseMsg;
     
       
   }
   

   /**
    * Call iph mapping web service.
    *
    * @param webserviceRequest the webservice request
    * @return the string
    */
   public String callIPHMappingWebService(String webserviceRequest)
   {
       
       LOGGER.info("start of createIPHMappingWebServiceMapping ");
       String webServiceResponseCode = null;
       String webServiceResponseDescription = null;
       String webServiceResponseStatus = null;
       String responseMsg = null;
       String webServiceResponse = null;
       LOGGER.info("callIPHMappingWebService called");
       LOGGER.info("callIPHMappingWebService JSON Request....."+webserviceRequest);
       Properties prop =   PropertiesFileLoader.getPropertyLoader(ContentScreenConstants.MESS_PROP);
       String targetURL =  prop.getProperty(ContentScreenConstants.IPH_MAPPING_WEBSERVICE_URL);
       
       LOGGER.info("IPHMappingWebService URL = "+targetURL);
       
       try{
           
           URL createWebServiceURL = new URL(targetURL);
           HttpURLConnection con = (HttpURLConnection)createWebServiceURL.openConnection();
           con.setDoOutput(true);
           con.setDoInput(true);

           con.setRequestProperty("Content-Type", "application/json;");
           con.setRequestProperty("Accept", "application/json");
           con.setRequestProperty("Method", "POST");
           OutputStream os = con.getOutputStream();
           os.write(webserviceRequest.getBytes("UTF-8"));
           os.close();


           StringBuilder sb = new StringBuilder();  
           int httpResult =con.getResponseCode();
           
           LOGGER.info("HTTP Result from IPHMappingWebService =  "+httpResult);
           
           if(httpResult == HttpURLConnection.HTTP_OK ||
                   httpResult == HttpURLConnection.HTTP_CREATED )
           
           {
               
           LOGGER.info("HTTP Result from IPHMappingWebService when OK =  "+httpResult);
           BufferedReader br = new BufferedReader(new   InputStreamReader(con.getInputStream(),"utf-8"));  

               String line = null;
               while ((line = br.readLine()) != null)
               {  
               sb.append(line + "\n");  
               }
                br.close(); 
                webServiceResponse = sb.toString();
                LOGGER.info("Response from callIPHMappingWebService in string format = "+ webServiceResponse);  
                //parse web service response
                JSONObject jsonResponseObject = new JSONObject(webServiceResponse);
                
                webServiceResponseCode = jsonResponseObject.getString("code");
                webServiceResponseDescription = jsonResponseObject.getString("message");
                webServiceResponseStatus = jsonResponseObject.getString("status");
                
             
                if(webServiceResponseStatus.equals("SUCCESS") && webServiceResponseDescription.equalsIgnoreCase("Pet successfully mapped to IPH")){
                    LOGGER.info("webServiceResponseCode------"+webServiceResponseCode);
                    LOGGER.info("webServiceResponseStatus------"+webServiceResponseStatus);
                    LOGGER.info("webServiceResponseDescription------"+webServiceResponseDescription);                    
                    responseMsg ="The IPH mapping has been  updated successfully. ";
                }
                else if(webServiceResponseStatus.equalsIgnoreCase("FAIL") && webServiceResponseDescription.equalsIgnoreCase("Category not found in PIM"))
                {
                    LOGGER.info("webServiceResponseCode------"+webServiceResponseCode);
                    LOGGER.info("webServiceResponseStatus------"+webServiceResponseStatus);
                    LOGGER.info("webServiceResponseDescription------"+webServiceResponseDescription);
                    responseMsg= "The IPH mapping cannot be updated,contact the system administrator.";
                }
                
                else {
                    LOGGER.info("webServiceResponseCode------"+webServiceResponseCode);
                    LOGGER.info("webServiceResponseStatus------"+webServiceResponseStatus);
                    LOGGER.info("webServiceResponseDescription------"+webServiceResponseDescription);                    
                    responseMsg ="The IPH mapping cannot be updated , contact the system administrator.";
                    LOGGER.severe("Error returned from content update web service = " + webServiceResponseDescription);
                }
           }
           else
           {
               System.out.println("OTHER THAN 200 OR 201");
               System.out.println("HTTP call response code and response message =  "+con.getResponseCode()+" , "+ con.getResponseMessage());
               LOGGER.info("webServiceResponseCode------"+webServiceResponseCode);
               LOGGER.info("webServiceResponseStatus------"+webServiceResponseStatus);
               LOGGER.info("webServiceResponseDescription------"+webServiceResponseDescription);  
               responseMsg ="The IPH mapping cannot  be updated HTTP Error, contact  the System Administrator.";
           }  
           
       }catch(Exception exception){
           LOGGER.severe("Exception Occurred callIPHMappingWebService =  "+exception.getCause());
           responseMsg ="The IPH mapping cannot  be updated HTTP Error, contact  the System Administrator.";
           
       }

       return responseMsg;
     
       
   }
   

   
 /**
 * Gets the content managment info.
 *
 * @param orinNumber the orin number
 * @return the content managment info
 */
public ContentManagementVO getContentManagmentInfo(String orinNumber)  
   {
       try {
           
           return contentService.getContentManagmentInfoFromADSE(orinNumber);
       }
       catch (PEPServiceException serviceException) {
          
           LOGGER.log(Level.SEVERE, serviceException.getMessage());  
       }
       return null;  
   }





/**
 * Gets the child sku info.
 *
 * @param orinNumber the orin number
 * @return the child sku info
 */
public List<ChildSkuVO> getChildSkuInfo(String orinNumber)  
{
    try {
        
        return contentService.getSkusFromADSE(orinNumber);
    }
    catch (PEPServiceException serviceException) {
       
        LOGGER.log(Level.SEVERE, serviceException.getMessage());  
    }
    return null;  
}


/**
 * Gets the content history.
 *
 * @param orinNumber the orin number
 * @return the content history
 */
public ContentHistoryVO getContentHistory(String orinNumber)  
{
    try {
        
        return contentService.getContentHistoryFromADSE(orinNumber);
    }
    catch (PEPServiceException serviceException) {
       
        LOGGER.log(Level.SEVERE, serviceException.getMessage());  
    }
    return null;  
}



/**
 * Gets the copy attributes.
 *
 * @param orinNumber the orin number
 * @return the copy attributes
 */
public List<CopyAttributesVO> getCopyAttributes(String orinNumber)
   {
   try {
        
        return contentService.getCopyAttributesFromADSE(orinNumber);
    }
    catch (PEPServiceException serviceException) {
       
        LOGGER.log(Level.SEVERE, serviceException.getMessage());  
    }
    return null; 
    
   
}

/**
 * Gets the item primary hierarchy categories.
 *
 * @return the item primary hierarchy categories
 */
public List<ItemPrimaryHierarchyVO> getItemPrimaryHierarchyCategories()
{
        try {
             
             return contentService.getIPHCategories();
         }
         catch (PEPServiceException serviceException) {
            
             LOGGER.log(Level.SEVERE, serviceException.getMessage());  
         }
         return null; 
         

}
    	
}
