
package com.belk.pep.dao.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.belk.pep.constants.SqueryConstants;
import com.belk.pep.constants.XqueryConstants;
import com.belk.pep.dao.ContentDAO;
import com.belk.pep.exception.checked.PEPFetchException;
import com.belk.pep.model.PetsFound;
import com.belk.pep.vo.ChildSkuVO;
import com.belk.pep.vo.ColorAttributesVO;
import com.belk.pep.vo.ContentHistoryVO;
import com.belk.pep.vo.ContentManagementVO;
import com.belk.pep.vo.CopyAttributesVO;
import com.belk.pep.vo.GlobalAttributesVO;
import com.belk.pep.vo.ItemPrimaryHierarchyVO;
import com.belk.pep.vo.PetAttributeVO;
import com.belk.pep.vo.ProductDetailsVO;
import com.belk.pep.vo.SkuAttributesVO;
import com.belk.pep.vo.StyleInformationVO;

/**
 * The Class ContentDAOImpl.
 */
public class ContentDAOImpl implements ContentDAO{
    /** The Constant LOGGER. */
    private final static Logger LOGGER = Logger.getLogger(ContentDAOImpl.class
        .getName());

    /** The session factory. */
    private SessionFactory sessionFactory;


    /**
     * Check null.
     *
     * @param objectValue the object value
     * @return String
     */
    public String checkNull(Object objectValue){
        String valueStr = "";

        if(objectValue == null ){
            System.out.println("row object is null, setting to default value");

            valueStr = "No Data";

        }
        else
        {
            valueStr = objectValue.toString();
        }

        return valueStr;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getContentHistoryFromADSE(java.lang.String)
     */
    @Override
    public ContentHistoryVO getContentHistoryFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        ContentHistoryVO  contentHistory = null;
        List<Object[]> rows=null;

        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getContentHistory(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null && rows.size()>0)
            {
                for (final Object[] row : rows) {
                    contentHistory = new ContentHistoryVO();
                    contentHistory.setOrinNumber(checkNull(row[0]));
                    contentHistory.setContentCreatedDate(checkNull(row[1]));
                    contentHistory.setContentCreatedBy(checkNull(row[2]));
                    contentHistory.setContentLastUpdatedBy(checkNull(row[3]));
                    contentHistory.setContentStatus(checkNull(row[4]));
                    contentHistory.setEntryType(checkNull(row[5]));

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return contentHistory;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getContentManagmentInfoFromADSE(java.lang.String)
     */
    @Override
    public ContentManagementVO getContentManagmentInfoFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        ContentManagementVO  contentManagement = null;
        List<Object[]> rows=null;

        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getPetContentManagmentDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null && rows.size()>0)
            {
                for (final Object[] row : rows) {
                    contentManagement = new ContentManagementVO();
                    contentManagement.setOrinNumber(checkNull(row[0]));
                    contentManagement.setStyleNumber(checkNull(row[1]));
                    contentManagement.setStyleName(checkNull(row[2]));
                    contentManagement.setBrand(checkNull(row[3]));
                    contentManagement.setPriority(checkNull(row[4]));
                    contentManagement.setEntryType(checkNull(row[5]));

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return contentManagement;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getCopyAttributesFromADSE(java.lang.String)
     */
    @Override
    public List<CopyAttributesVO> getCopyAttributesFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        List<CopyAttributesVO>  copyAttributeList = null;
        List<Object[]> rows=null;
        CopyAttributesVO copyAttributes = new CopyAttributesVO();

        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getCopyAttributeDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null && rows.size()>0)
            {
                copyAttributeList= new ArrayList<CopyAttributesVO>();
                for (final Object[] row : rows) {
                    copyAttributes= new CopyAttributesVO();
                    copyAttributes.setOrin(checkNull(row[0]));
                    copyAttributes.setStyleId(checkNull(row[1]));
                    copyAttributes.setColor(checkNull(row[2]));
                    copyAttributes.setSize(checkNull(row[3]));
                    copyAttributes.setEntryType(checkNull(row[4]));
                    copyAttributeList.add(copyAttributes);

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return copyAttributeList;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getIPHCategories()
     */
    @Override
    public List<ItemPrimaryHierarchyVO> getIPHCategories()
            throws PEPFetchException {


        Session session = null;
        Transaction transaction = null;
        List<Object[]> rows=null;
        ItemPrimaryHierarchyVO itemPrimaryHierarchy = null;
        List<ItemPrimaryHierarchyVO> iphCategoryList = null;

        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getIphCategories());
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null && rows.size()>0)
            {
                iphCategoryList = new ArrayList<ItemPrimaryHierarchyVO>();
                final String[] arr = rows.toArray(new String[] {});
                for (final String row : arr) {
                    //instantiate a new itemPrimaryHierarchy object for  storing the category from each row of the xquery result set
                    itemPrimaryHierarchy =new ItemPrimaryHierarchyVO();
                    itemPrimaryHierarchy.setCategoryName(checkNull(row));
                    //Add each itemPrimaryHierarchy object to the list
                    iphCategoryList.add(itemPrimaryHierarchy);

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return iphCategoryList;
    }





    /**
     * Gets the IPH categories from adse.
     *
     * @param orinNumber the orin number
     * @return the IPH categories from adse
     * @throws PEPFetchException the PEP fetch exception
     */
    public GlobalAttributesVO getIPHCategoriesFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        GlobalAttributesVO  styleAttributes = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getStyleAttributeDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    styleAttributes = new GlobalAttributesVO ();


                    styleAttributes.setMdmid(checkNull(row[0]));
                    styleAttributes.setOmniChannelBrand(checkNull(row[1]));
                    styleAttributes.setOmniChannelBrandXpath(checkNull(row[2]));
                    styleAttributes.setProductDescription(checkNull(row[3]));
                    styleAttributes.setProductDescriptionXpath(checkNull(row[4]));
                    styleAttributes.setLaunchDate(checkNull(row[5]));
                    styleAttributes.setLaunchDateXpath(checkNull(row[6]));
                    styleAttributes.setBelkExclusive(checkNull(row[7]));
                    styleAttributes.setBelkExclusiveXpath(checkNull(row[8]));
                    styleAttributes.setChannelExclusive(checkNull(row[9]));
                    styleAttributes.setBelkExclusiveXpath(checkNull(row[10]));
                    styleAttributes.setSdf(checkNull(row[11]));
                    styleAttributes.setSdfXpath(checkNull(row[12]));
                    styleAttributes.setProductDimensionUom(checkNull(row[13]));
                    styleAttributes.setProductDimensionUomXpath(checkNull(row[14]));
                    styleAttributes.setProductLength(checkNull(row[15]));
                    styleAttributes.setProductLengthXpath(checkNull(row[16]));
                    styleAttributes.setProductHeight(checkNull(row[17]));
                    styleAttributes.setProductHeightXpath(checkNull(row[18]));
                    styleAttributes.setBopis(checkNull(row[19]));
                    styleAttributes.setBopisXpath(checkNull(row[20]));
                    styleAttributes.setGiftBox(checkNull(row[21]));
                    styleAttributes.setGiftBoxXpath(checkNull(row[22]));
                    styleAttributes.setImportDomestic(checkNull(row[23]));
                    styleAttributes.setImportDomesticXpath(checkNull(row[24]));
                    styleAttributes.setProductWeightUom(checkNull(row[25]));
                    styleAttributes.setProductWeightUomXpath(checkNull(row[26]));
                    styleAttributes.setProductWeight(checkNull(row[27]));
                    styleAttributes.setProductWeightXpath(checkNull(row[28]));





                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return styleAttributes;
    }



    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getPetAttributeDetails(java.lang.String)
     */
    @Override
    public List<PetAttributeVO> getPetAttributeDetails(String categoryId)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        List<Object[]> rows=null;
        new XqueryConstants();
        List<PetAttributeVO> petAttributeList=null;
        final String categoryIdDummy ="1899";
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();

            final Query query =session.createSQLQuery(SqueryConstants.getPetAttributes(categoryIdDummy));
            if(query!=null)
            {
                LOGGER.info("query executed successfully..........");

                LOGGER.info("query.list();.........."+query.list());
                rows = query.list();
                LOGGER.info("rows..........."+rows);

            }

            if(rows!=null)
            {
                petAttributeList=new ArrayList<PetAttributeVO>();
                for (final Object[] row : rows) {

                    LOGGER.info("row[0]....."+row[0]);
                    LOGGER.info("row[1]....."+row[1]);
                    LOGGER.info("row[2]....."+row[2]);
                    LOGGER.info("row[3]....."+row[3]);
                    LOGGER.info("row[4]....."+row[4]);
                    LOGGER.info("row[5]....."+row[5]);
                    LOGGER.info("row[6]....."+row[6]);
                    LOGGER.info("row[7]....."+row[7]);
                    LOGGER.info("row[8]....."+row[8]);
                    LOGGER.info("row[9]....."+row[9]);
                    LOGGER.info("row[10]....."+row[10]);
                    LOGGER.info("row[11]....."+row[11]);
                    LOGGER.info("row[12]....."+row[12]);
                    LOGGER.info("row[13]....."+row[13]);
                    LOGGER.info("row[14]....."+row[14]);
                    final PetAttributeVO petAttributesObject = new PetAttributeVO();
                    petAttributesObject.setAttributeId(checkNull(row[0]));
                    petAttributesObject.setCategoryId(checkNull(row[1]));
                    petAttributesObject.setAttributeName(checkNull(row[2]));
                    petAttributesObject.setAttributeFieldType(checkNull(row[3]));
                    petAttributesObject.setAttributePath(checkNull(row[4]));
                    petAttributesObject.setAttributeStatus(checkNull(row[5]));
                    petAttributesObject.setDisplayName(checkNull(row[6]));
                    petAttributesObject.setAttributeFieldValue(checkNull(row[7]));
                    petAttributesObject.setIsDisplayable(checkNull(row[8]));
                    petAttributesObject.setIsEditable(checkNull(row[9]));
                    petAttributesObject.setIsMandatory(checkNull(row[10]));
                    petAttributesObject.setHtmlDescription(checkNull(row[11]));
                    petAttributesObject.setMaximumOcurrence(checkNull(row[12]));
                    petAttributesObject.setAttributeType(checkNull(row[13]));
                    petAttributesObject.setAttributeFieldValueSequence(checkNull(row[14]));
                    petAttributeList.add(petAttributesObject);


                }
                LOGGER.info(" petAttributeList....."+ petAttributeList.size());
            }


        }
        catch(final Exception exception)
        {
            throw new PEPFetchException(exception);
        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return petAttributeList;



    }



    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getProductInfoFromADSE(java.lang.String)
     */
    @Override
    public ProductDetailsVO getProductInfoFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        ProductDetailsVO  productDetails = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getProductDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    productDetails = new ProductDetailsVO();
                    productDetails.setProductName(checkNull(row[2]));
                    productDetails.setProductDescription(checkNull(row[3]));

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return productDetails;
    }


    /**
     * Gets the session factory.
     *
     * @return the sessionFactory
     */
    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }


    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getSkuAttributesFromADSE(java.lang.String)
     */
    @Override
    public SkuAttributesVO getSkuAttributesFromADSE(String skuOrinNumber) throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        SkuAttributesVO  skuAttributes = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getSkuAttributes(skuOrinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    skuAttributes = new SkuAttributesVO ();
                    skuAttributes.setSourceDomestic(checkNull(row[9]));
                    skuAttributes.setNrfSizeCode(checkNull(row[10]));
                    skuAttributes.setVendorSizeDescription(checkNull(row[5]));
                    skuAttributes.setOmnichannelSizeDescription(checkNull(row[7]));
                    skuAttributes.setBelk04Upc(checkNull(row[1]));
                    skuAttributes.setVendorUpc(checkNull(row[3]));

                }
            }


        }
        catch(final Exception exception)
        {
            throw new PEPFetchException(exception);
        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return skuAttributes;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getSkusFromADSE(java.lang.String)
     */
    @Override
    public List<ChildSkuVO> getSkusFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        ChildSkuVO  sku = null;
        List<Object[]> rows=null;
        List<ChildSkuVO> skuList=null;

        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getChildSKUDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null && rows.size()>0)
            {
                skuList= new ArrayList<ChildSkuVO>();
                for (final Object[] row : rows)
                {
                    sku = new ChildSkuVO();
                    sku.setOrinNumber(checkNull(row[0]));
                    sku.setVendorName(checkNull(row[1]));
                    sku.setStyleName(checkNull(row[2]));
                    sku.setStyleNumber(checkNull(row[3]));
                    sku.setColorCode(checkNull(row[4]));
                    sku.setColorName(checkNull(row[5]));
                    sku.setSizeName(checkNull(row[6]));
                    sku.setEntryType(checkNull(row[7]));
                    skuList.add(sku);

                }
            }


        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return skuList;
    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getStyleAndItsChildFromADSE(java.lang.String)
     */
    @Override
    public List<PetsFound> getStyleAndItsChildFromADSE(String orinNumber)
            throws PEPFetchException {

        final List<PetsFound> petList = new ArrayList<PetsFound>();
        PetsFound pet=null;
        final XqueryConstants xqueryConstants= new XqueryConstants();
        Session session = null;
        Transaction transaction =  null;

        try{
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            //Hibernate provides a createSQLQuery method to let you call your native SQL statement directly.
            final Query query = session.createSQLQuery(xqueryConstants.getStyleAndStyleColorAndSKU(orinNumber));
            LOGGER.info("Query.." + query);
            // execute delete SQL statement
            final List<Object[]> rows = query.list();
            if (rows != null) {
                LOGGER.info("recordsFetched..." + rows);
                for(final Object[] row : rows){
                    LOGGER.info(" getStyleAndItsChildFromADSE  Query Executing.....");
                    row[0].toString();
                    row[1].toString();
                    row[2].toString();
                    row[3].toString();
                    row[4].toString();
                    row[5].toString();
                    row[6].toString();
                    row[7].toString();

                    pet = new PetsFound();
                    pet.setParentStyleOrin(checkNull(row[0]));
                    pet.setOrinNumber(checkNull(row[1]));
                    pet.setColorCode(checkNull(row[2]));
                    pet.setColor(checkNull(row[3]));
                    pet.setVendorSize(checkNull(row[4]));
                    pet.setOmniSizeDescription(checkNull(row[5]));
                    pet.setContentState(checkNull(row[6]));
                    pet.setCompletionDate(checkNull(row[7]));
                    pet.setEntryType(checkNull(row[8]));

                    petList.add(pet);
                }
                LOGGER.info("petList size..."+petList.size());
            }


        }catch(final Exception e){
            LOGGER.info("Exception..." + e.getMessage());

        }
        finally
        {
            LOGGER.info("recordsFetched. getStyleAndItsChildFromADSE finally block.." );
            session.flush();
            transaction.commit();
            session.close();

        }

        LOGGER.info("This is from getStyleAndItsChildFromADSE..End" );
        return petList;

    }

    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getStyleAttributesFromADSE(java.lang.String)
     */
    @Override
    public GlobalAttributesVO getStyleAttributesFromADSE(String orinNumber)
            throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        GlobalAttributesVO  styleAttributes = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getStyleAttributeDetails(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    styleAttributes = new GlobalAttributesVO ();


                    styleAttributes.setMdmid(checkNull(row[0]));
                    styleAttributes.setOmniChannelBrand(checkNull(row[1]));
                    styleAttributes.setOmniChannelBrandXpath(checkNull(row[2]));
                    styleAttributes.setProductDescription(checkNull(row[3]));
                    styleAttributes.setProductDescriptionXpath(checkNull(row[4]));
                    styleAttributes.setLaunchDate(checkNull(row[5]));
                    styleAttributes.setLaunchDateXpath(checkNull(row[6]));
                    styleAttributes.setBelkExclusive(checkNull(row[7]));
                    styleAttributes.setBelkExclusiveXpath(checkNull(row[8]));
                    styleAttributes.setChannelExclusive(checkNull(row[9]));
                    styleAttributes.setBelkExclusiveXpath(checkNull(row[10]));
                    styleAttributes.setSdf(checkNull(row[11]));
                    styleAttributes.setSdfXpath(checkNull(row[12]));
                    styleAttributes.setProductDimensionUom(checkNull(row[13]));
                    styleAttributes.setProductDimensionUomXpath(checkNull(row[14]));
                    styleAttributes.setProductLength(checkNull(row[15]));
                    styleAttributes.setProductLengthXpath(checkNull(row[16]));
                    styleAttributes.setProductHeight(checkNull(row[17]));
                    styleAttributes.setProductHeightXpath(checkNull(row[18]));
                    styleAttributes.setBopis(checkNull(row[19]));
                    styleAttributes.setBopisXpath(checkNull(row[20]));
                    styleAttributes.setGiftBox(checkNull(row[21]));
                    styleAttributes.setGiftBoxXpath(checkNull(row[22]));
                    styleAttributes.setImportDomestic(checkNull(row[23]));
                    styleAttributes.setImportDomesticXpath(checkNull(row[24]));
                    styleAttributes.setProductWeightUom(checkNull(row[25]));
                    styleAttributes.setProductWeightUomXpath(checkNull(row[26]));
                    styleAttributes.setProductWeight(checkNull(row[27]));
                    styleAttributes.setProductWeightXpath(checkNull(row[28]));





                }
            }


        }
        catch(final Exception exception)
        {
            throw  new PEPFetchException(exception);
        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return styleAttributes;
    }


    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getStyleColorAttributesFromADSE(java.lang.String)
     */
    @Override
    public ColorAttributesVO getStyleColorAttributesFromADSE(String styleColorOrinNumber) throws PEPFetchException {

        Session session = null;
        Transaction transaction = null;
        ColorAttributesVO  styleColorAttributes = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction= session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getStyleColorAttributeDetails(styleColorOrinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    styleColorAttributes = new ColorAttributesVO ();
                    styleColorAttributes.setOrinNumber(checkNull(row[0]));
                    styleColorAttributes.setVendorColor(checkNull(row[1]));
                    styleColorAttributes.setVendorColorXpath(checkNull(row[2]));
                    styleColorAttributes.setOmnichannelColorDescription(checkNull(row[3]));
                    styleColorAttributes.setOmniChannelColorXpath(checkNull(row[4]));
                    styleColorAttributes.setColorFamily(checkNull(row[5]));
                    styleColorAttributes.setOmniChannelColorFamilyXpath(checkNull(row[6]));
                    styleColorAttributes.setSuperColorOne(checkNull(row[7]));
                    styleColorAttributes.setSecondaryColorOneXpath(checkNull(row[8]));
                    styleColorAttributes.setSuperColorTwo(checkNull(row[9]));
                    styleColorAttributes.setSecondaryColorTwoXpath(checkNull(row[10]));
                    styleColorAttributes.setSuperColorThree(checkNull(row[11]));
                    styleColorAttributes.setSecondaryColorThreeXpath(checkNull(row[12]));
                    styleColorAttributes.setSuperColorFour(checkNull(row[13]));
                    styleColorAttributes.setSecondaryColorFourXpath(checkNull(row[14]));

                }
            }


        }
        catch(final Exception exception)
        {
            throw new PEPFetchException(exception);
        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return styleColorAttributes;
    }


    /* (non-Javadoc)
     * @see com.belk.pep.dao.ContentDAO#getStyleInfoFromADSE(java.lang.String)
     */
    @Override
    public StyleInformationVO getStyleInfoFromADSE(String orinNumber)
            throws PEPFetchException {
        Session session = null;
        Transaction transaction = null;
        StyleInformationVO style = null;
        List<Object[]> rows=null;
        final XqueryConstants xqueryConstants = new XqueryConstants();
        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();
            // Hibernate provides a createSQLQuery method to let you call your
            // native SQL statement directly.
            final Query query =session.createSQLQuery(xqueryConstants.getStyleInformation(orinNumber));
            if(query!=null)
            {
                rows = query.list();
            }

            if(rows!=null)
            {
                for (final Object[] row : rows) {
                    style = new StyleInformationVO();
                    style.setOrin(checkNull(row[0]));
                    style.setDepartmentId(checkNull(row[1]));
                    style.setVendorName(checkNull(row[2]));
                    LOGGER.info("-----getStyleId--checkNull(row[3])----"+ checkNull(row[3]));
                    style.setStyleId(checkNull(row[3]));
                    style.setClassId(checkNull(row[4]));
                    style.setVendorId(checkNull(row[5]));
                    style.setDescription(checkNull(row[6]));
                    style.setOmniChannelVendorIndicator(checkNull(row[7]));
                    style.setVendorProvidedImageIndicator(checkNull(row[8]));
                    style.setVendorSampleIndicator(checkNull(row[9]));
                    style.setEntryType(checkNull(row[10]));
                    style.setCompletionDateOfStyle(checkNull(row[11]));

                }
            }


        }catch(final Exception e) {
            e.printStackTrace();
            throw new PEPFetchException(e);
        }
        finally {
            session.flush();
            transaction.commit();
            session.close();
        }
        return style;

    }

    /**
     * Sets the session factory.
     *
     * @param sessionFactory the new session factory
     */
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }





}
