create or replace TRIGGER "VENDORPORTAL"."T_ADSE_GRPCAT_SHRED_BIUR" 
FOR INSERT  OR UPDATE OF XML_DATA,PET_DISPLAY_FLAG ON VENDORPORTAL.ADSE_GROUP_CATALOG 
    COMPOUND TRIGGER
L_MDMID                    VARCHAR2(64);
L_sql_code                 INT :=0;
L_sql_err                  VARCHAR2(2000) := NULL;
Updatesqlquery             VARCHAR2(600);
L_PET_SOURCE  VARCHAR2(20):=NULL;
L_XML_DATA ADSE_GROUP_CATALOG.XML_DATA%type :=:New.XML_DATA;
L_GROUP_MDMID  ADSE_GROUP_CATALOG.MDMID%type:=:NEW.MDMID;
STATUS          			VARCHAR2(1) :='P';
CHILD_GROUP_OPEN          	VARCHAR2(1):='';
CHILD_EXIST          		VARCHAR2(1):='';
CHILD_STYLE_OPEN          	VARCHAR2(1):='';

CURSOR GROUP_MDMID IS 
SELECT MDMID FROM ADSE_GROUP_CHILD_MAPPING WHERE COMPONENT_GROUPING_ID = L_GROUP_MDMID;


CURSOR SHREDED_ROW IS 
SELECT 
TO_DATE(GROUP_XML.COMPLETION_DATE,'YYYY-MM-DD') AS COMPLETION_DATE,
TO_DATE(GROUP_XML.START_DATE,'YYYY-MM-DD') AS START_DATE,
TO_DATE(GROUP_XML.END_DATE,'YYYY-MM-DD') AS END_DATE
FROM 
XMLTABLE('let 
$CompletionDate:=/pim_entry/entry/Group_Ctg_Spec/Completion_Date,
$Startdate:=/pim_entry/entry/Group_Ctg_Spec/Effective_Start_Date,
$EndDate:=/pim_entry/entry/Group_Ctg_Spec/Effective_End_Date
return 
	<SPEC>
		<COMPLETION_DATE>{$CompletionDate}</COMPLETION_DATE>
		<START_DATE>{$Startdate}</START_DATE>
		<END_DATE>{$EndDate}</END_DATE>
	</SPEC>'
passing L_XML_DATA 
Columns 
	COMPLETION_DATE VARCHAR2(10) path '/SPEC/COMPLETION_DATE',
	START_DATE VARCHAR2(10) path '/SPEC/START_DATE',
	END_DATE VARCHAR2(10) path '/SPEC/END_DATE') GROUP_XML;


BEFORE EACH ROW
IS
BEGIN
  L_GROUP_MDMID:=:NEW.MDMID;
  -- Data shredding for Group catalog
	 FOR SHRED IN  SHREDED_ROW
  LOOP
    IF (:NEW.PRE_CUT_OVER_FLAG ='true' AND :NEW.PET_SOURCE is NULL) THEN
      L_PET_SOURCE := 'PEP:C';  
  ELSIF (:NEW.PET_SOURCE is NULL) THEN
      L_PET_SOURCE := 'PEP'; 
  ELSE
      L_PET_SOURCE:=:NEW.PET_SOURCE;
  END IF;

      :New.COMPLETION_DATE:=SHRED.COMPLETION_DATE; 
      :New.START_DATE := SHRED.START_DATE;
      :New.END_DATE := SHRED.END_DATE;
      :New.PET_SOURCE := L_PET_SOURCE;
     -- INSERT INTO TEST_QUERY(TEXT) VALUES(SHRED.COMPLETION_DATE);  
  END LOOP;
  

  EXCEPTION
  WHEN OTHERS THEN
    L_sql_code := SQLCODE;
    L_sql_err  := SUBSTR(SQLERRM,1,200);
    DBMS_OUTPUT.PUT_LINE ('Trigger T_ADSE_GRPCAT_SHRED_AIUR Error = '||L_sql_code || L_sql_err);
	raise_application_error(-20000, 'Fatal error from trigger T_ADSE_GRPCAT_SHRED_AIUR '||L_sql_code || L_sql_err);
  END BEFORE EACH ROW;
  
  AFTER STATEMENT
  IS BEGIN
  
  FOR GROUP_MDMID_ID IN  GROUP_MDMID
  LOOP
  
   BEGIN
		SELECT 'Y' INTO CHILD_EXIST
		FROM ADSE_GROUP_CHILD_MAPPING
		WHERE MDMID = GROUP_MDMID_ID.MDMID AND ROWNUM=1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		CHILD_EXIST :='N';
	END; 
  --INSERT INTO TEST_QUERY(TEXT) VALUES(GROUP_MDMID_ID.MDMID);
	BEGIN
    SELECT 'Y' INTO CHILD_GROUP_OPEN 
	FROM ADSE_GROUP_CATALOG 
	WHERE MDMID IN ( 
		SELECT COMPONENT_GROUPING_ID
		FROM ADSE_GROUP_CHILD_MAPPING
		WHERE MDMID = GROUP_MDMID_ID.MDMID
					) 
		AND (GROUP_OVERALL_STATUS_CODE ='01' OR PET_DISPLAY_FLAG ='O') AND ROWNUM=1; -- 'O' -Open Child exists
    EXCEPTION
		WHEN NO_DATA_FOUND THEN
		CHILD_GROUP_OPEN :='N';
	END;
	--INSERT INTO TEST_QUERY(TEXT) VALUES('CHILD_GROUP_OPEN'||CHILD_GROUP_OPEN);
	BEGIN
	SELECT 'Y' INTO CHILD_STYLE_OPEN 
	FROM ADSE_PET_CATALOG 
	WHERE MDMID IN ( 
		SELECT COMPONENT_STYLE_ID
		FROM ADSE_GROUP_CHILD_MAPPING
		WHERE MDMID = GROUP_MDMID_ID.MDMID
					) 
		AND ( PET_STYLE_STATE ='Y' OR PET_STATE='01')  AND ROWNUM=1;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		CHILD_STYLE_OPEN :='N';
	END;
  --INSERT INTO TEST_QUERY(TEXT) VALUES('CHILD_STYLE_OPEN'||CHILD_STYLE_OPEN);
	STATUS := 'P';
	IF (CHILD_EXIST='Y') THEN
		IF (CHILD_GROUP_OPEN='Y' OR CHILD_STYLE_OPEN = 'Y') THEN
			STATUS := 'O';
		ELSE
			STATUS := 'C';
		END IF;
	END IF;
 -- INSERT INTO TEST_QUERY(TEXT) VALUES('STATUS'||STATUS);
    Updatesqlquery:= 'UPDATE Adse_GROUP_Catalog  Set PET_DISPLAY_FLAG = '''|| STATUS || ''' WHERE MDMID = '''||GROUP_MDMID_ID.MDMID||'''';
    --INSERT INTO TEST_QUERY(TEXT) VALUES('Updatesqlquery'||Updatesqlquery);
   EXECUTE Immediate Updatesqlquery;
 END LOOP;

  EXCEPTION
  WHEN OTHERS THEN
    L_sql_code := SQLCODE;
    L_sql_err  := SUBSTR(SQLERRM,1,200);
    DBMS_OUTPUT.PUT_LINE ('Trigger T_ADSE_GRPCAT_SHRED_AIUR Error = '||L_sql_code || L_sql_err);
	raise_application_error(-20000, 'Fatal error from trigger T_ADSE_GRPCAT_SHRED_AIUR '||L_sql_code || L_sql_err);
  END AFTER STATEMENT;
END ;